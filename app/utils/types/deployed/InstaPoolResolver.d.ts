/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface InstaPoolResolverInterface extends ethers.utils.Interface {
  functions: {
    'getTokenLimit(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'getTokenLimit', values: [string]): string

  decodeFunctionResult(functionFragment: 'getTokenLimit', data: BytesLike): Result

  events: {}
}

export class InstaPoolResolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: InstaPoolResolverInterface

  functions: {
    getTokenLimit(
      token: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: {
        dydx: BigNumber
        maker: BigNumber
        compound: BigNumber
        aave: BigNumber
        0: BigNumber
        1: BigNumber
        2: BigNumber
        3: BigNumber
      }
    }>

    'getTokenLimit(address)'(
      token: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: {
        dydx: BigNumber
        maker: BigNumber
        compound: BigNumber
        aave: BigNumber
        0: BigNumber
        1: BigNumber
        2: BigNumber
        3: BigNumber
      }
    }>
  }

  getTokenLimit(
    token: string,
    overrides?: CallOverrides,
  ): Promise<{
    dydx: BigNumber
    maker: BigNumber
    compound: BigNumber
    aave: BigNumber
    0: BigNumber
    1: BigNumber
    2: BigNumber
    3: BigNumber
  }>

  'getTokenLimit(address)'(
    token: string,
    overrides?: CallOverrides,
  ): Promise<{
    dydx: BigNumber
    maker: BigNumber
    compound: BigNumber
    aave: BigNumber
    0: BigNumber
    1: BigNumber
    2: BigNumber
    3: BigNumber
  }>

  callStatic: {
    getTokenLimit(
      token: string,
      overrides?: CallOverrides,
    ): Promise<{
      dydx: BigNumber
      maker: BigNumber
      compound: BigNumber
      aave: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
    }>

    'getTokenLimit(address)'(
      token: string,
      overrides?: CallOverrides,
    ): Promise<{
      dydx: BigNumber
      maker: BigNumber
      compound: BigNumber
      aave: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
    }>
  }

  filters: {}

  estimateGas: {
    getTokenLimit(token: string, overrides?: CallOverrides): Promise<BigNumber>

    'getTokenLimit(address)'(token: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    getTokenLimit(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getTokenLimit(address)'(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
