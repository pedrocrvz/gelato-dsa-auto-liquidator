/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface GelatoGasPriceOracleInterface extends ethers.utils.Interface {
  functions: {
    'isOwner()': FunctionFragment
    'latestAnswer()': FunctionFragment
    'oracle()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setGasPrice(uint256)': FunctionFragment
    'setOracle(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string
  encodeFunctionData(functionFragment: 'latestAnswer', values?: undefined): string
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'setGasPrice', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setOracle', values: [string]): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string

  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'latestAnswer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setGasPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {
    'LogGasPriceSet(uint256,uint256)': EventFragment
    'LogOracleSet(address,address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogGasPriceSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogOracleSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export class GelatoGasPriceOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: GelatoGasPriceOracleInterface

  functions: {
    isOwner(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isOwner()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    latestAnswer(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'latestAnswer()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    oracle(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'oracle()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    owner(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'owner()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setGasPrice(_newGasPrice: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'setGasPrice(uint256)'(_newGasPrice: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    setOracle(_newOracle: string, overrides?: Overrides): Promise<ContractTransaction>

    'setOracle(address)'(_newOracle: string, overrides?: Overrides): Promise<ContractTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>
  }

  isOwner(overrides?: CallOverrides): Promise<boolean>

  'isOwner()'(overrides?: CallOverrides): Promise<boolean>

  latestAnswer(overrides?: CallOverrides): Promise<BigNumber>

  'latestAnswer()'(overrides?: CallOverrides): Promise<BigNumber>

  oracle(overrides?: CallOverrides): Promise<string>

  'oracle()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setGasPrice(_newGasPrice: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'setGasPrice(uint256)'(_newGasPrice: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  setOracle(_newOracle: string, overrides?: Overrides): Promise<ContractTransaction>

  'setOracle(address)'(_newOracle: string, overrides?: Overrides): Promise<ContractTransaction>

  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

  callStatic: {
    isOwner(overrides?: CallOverrides): Promise<boolean>

    'isOwner()'(overrides?: CallOverrides): Promise<boolean>

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>

    'latestAnswer()'(overrides?: CallOverrides): Promise<BigNumber>

    oracle(overrides?: CallOverrides): Promise<string>

    'oracle()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setGasPrice(_newGasPrice: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setGasPrice(uint256)'(_newGasPrice: BigNumberish, overrides?: CallOverrides): Promise<void>

    setOracle(_newOracle: string, overrides?: CallOverrides): Promise<void>

    'setOracle(address)'(_newOracle: string, overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    LogGasPriceSet(oldGasPrice: BigNumberish | null, newGasPrice: BigNumberish | null): EventFilter

    LogOracleSet(oldOracle: string | null, newOracle: string | null): EventFilter

    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter
  }

  estimateGas: {
    isOwner(overrides?: CallOverrides): Promise<BigNumber>

    'isOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>

    'latestAnswer()'(overrides?: CallOverrides): Promise<BigNumber>

    oracle(overrides?: CallOverrides): Promise<BigNumber>

    'oracle()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setGasPrice(_newGasPrice: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'setGasPrice(uint256)'(_newGasPrice: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    setOracle(_newOracle: string, overrides?: Overrides): Promise<BigNumber>

    'setOracle(address)'(_newOracle: string, overrides?: Overrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'latestAnswer()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'oracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setGasPrice(_newGasPrice: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'setGasPrice(uint256)'(_newGasPrice: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    setOracle(_newOracle: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'setOracle(address)'(_newOracle: string, overrides?: Overrides): Promise<PopulatedTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>
  }
}
