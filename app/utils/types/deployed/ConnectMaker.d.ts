/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ConnectMakerInterface extends ethers.utils.Interface {
  functions: {
    'borrow(uint256,uint256,uint256,uint256)': FunctionFragment
    'close(uint256)': FunctionFragment
    'connectorID()': FunctionFragment
    'deposit(uint256,uint256,uint256,uint256)': FunctionFragment
    'depositDai(uint256,uint256,uint256)': FunctionFragment
    'exitDai(uint256,uint256,uint256,uint256)': FunctionFragment
    'name()': FunctionFragment
    'open(string)': FunctionFragment
    'payback(uint256,uint256,uint256,uint256)': FunctionFragment
    'transfer(uint256,address)': FunctionFragment
    'withdraw(uint256,uint256,uint256,uint256)': FunctionFragment
    'withdrawDai(uint256,uint256,uint256)': FunctionFragment
    'withdrawLiquidated(uint256,uint256,uint256,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'borrow',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'close', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'connectorID', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'depositDai', values: [BigNumberish, BigNumberish, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'exitDai',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'open', values: [string]): string
  encodeFunctionData(
    functionFragment: 'payback',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'transfer', values: [BigNumberish, string]): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'withdrawDai', values: [BigNumberish, BigNumberish, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'withdrawLiquidated',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string

  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'close', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'connectorID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositDai', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exitDai', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'open', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payback', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawDai', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawLiquidated', data: BytesLike): Result

  events: {
    'LogBorrow(uint256,bytes32,uint256,uint256,uint256)': EventFragment
    'LogClose(uint256,bytes32)': EventFragment
    'LogDeposit(uint256,bytes32,uint256,uint256,uint256)': EventFragment
    'LogDepositDai(uint256,uint256,uint256)': EventFragment
    'LogExitDai(uint256,bytes32,uint256,uint256,uint256)': EventFragment
    'LogOpen(uint256,bytes32)': EventFragment
    'LogPayback(uint256,bytes32,uint256,uint256,uint256)': EventFragment
    'LogTransfer(uint256,bytes32,address)': EventFragment
    'LogWithdraw(uint256,bytes32,uint256,uint256,uint256)': EventFragment
    'LogWithdrawDai(uint256,uint256,uint256)': EventFragment
    'LogWithdrawLiquidated(uint256,bytes32,uint256,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogBorrow'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogClose'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogDeposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogDepositDai'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExitDai'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogOpen'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogPayback'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTransfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogWithdrawDai'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogWithdrawLiquidated'): EventFragment
}

export class ConnectMaker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ConnectMakerInterface

  functions: {
    borrow(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'borrow(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    close(vault: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>

    'close(uint256)'(vault: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>

    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    deposit(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'deposit(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    depositDai(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'depositDai(uint256,uint256,uint256)'(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    exitDai(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'exitDai(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    name(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'name()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    open(colType: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    'open(string)'(colType: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    payback(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'payback(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    transfer(vault: BigNumberish, nextOwner: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    'transfer(uint256,address)'(
      vault: BigNumberish,
      nextOwner: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    withdraw(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'withdraw(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    withdrawDai(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'withdrawDai(uint256,uint256,uint256)'(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    withdrawLiquidated(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'withdrawLiquidated(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>
  }

  borrow(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'borrow(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  close(vault: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>

  'close(uint256)'(vault: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>

  connectorID(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    _id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'connectorID()'(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    _id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  deposit(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'deposit(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  depositDai(
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'depositDai(uint256,uint256,uint256)'(
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  exitDai(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'exitDai(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  open(colType: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  'open(string)'(colType: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  payback(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'payback(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  transfer(vault: BigNumberish, nextOwner: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  'transfer(uint256,address)'(
    vault: BigNumberish,
    nextOwner: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  withdraw(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'withdraw(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  withdrawDai(
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'withdrawDai(uint256,uint256,uint256)'(
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  withdrawLiquidated(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'withdrawLiquidated(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  callStatic: {
    borrow(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'borrow(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    close(vault: BigNumberish, overrides?: CallOverrides): Promise<void>

    'close(uint256)'(vault: BigNumberish, overrides?: CallOverrides): Promise<void>

    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    deposit(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'deposit(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    depositDai(amt: BigNumberish, getId: BigNumberish, setId: BigNumberish, overrides?: CallOverrides): Promise<void>

    'depositDai(uint256,uint256,uint256)'(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    exitDai(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'exitDai(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    open(colType: string, overrides?: CallOverrides): Promise<BigNumber>

    'open(string)'(colType: string, overrides?: CallOverrides): Promise<BigNumber>

    payback(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'payback(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    transfer(vault: BigNumberish, nextOwner: string, overrides?: CallOverrides): Promise<void>

    'transfer(uint256,address)'(vault: BigNumberish, nextOwner: string, overrides?: CallOverrides): Promise<void>

    withdraw(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'withdraw(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    withdrawDai(amt: BigNumberish, getId: BigNumberish, setId: BigNumberish, overrides?: CallOverrides): Promise<void>

    'withdrawDai(uint256,uint256,uint256)'(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    withdrawLiquidated(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'withdrawLiquidated(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    LogBorrow(vault: BigNumberish | null, ilk: BytesLike | null, tokenAmt: null, getId: null, setId: null): EventFilter

    LogClose(vault: BigNumberish | null, ilk: BytesLike | null): EventFilter

    LogDeposit(vault: BigNumberish | null, ilk: BytesLike | null, tokenAmt: null, getId: null, setId: null): EventFilter

    LogDepositDai(tokenAmt: null, getId: null, setId: null): EventFilter

    LogExitDai(vault: BigNumberish | null, ilk: BytesLike | null, tokenAmt: null, getId: null, setId: null): EventFilter

    LogOpen(vault: BigNumberish | null, ilk: BytesLike | null): EventFilter

    LogPayback(vault: BigNumberish | null, ilk: BytesLike | null, tokenAmt: null, getId: null, setId: null): EventFilter

    LogTransfer(vault: BigNumberish | null, ilk: BytesLike | null, newOwner: null): EventFilter

    LogWithdraw(
      vault: BigNumberish | null,
      ilk: BytesLike | null,
      tokenAmt: null,
      getId: null,
      setId: null,
    ): EventFilter

    LogWithdrawDai(tokenAmt: null, getId: null, setId: null): EventFilter

    LogWithdrawLiquidated(
      vault: BigNumberish | null,
      ilk: BytesLike | null,
      tokenAmt: null,
      getId: null,
      setId: null,
    ): EventFilter
  }

  estimateGas: {
    borrow(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'borrow(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    close(vault: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>

    'close(uint256)'(vault: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>

    connectorID(overrides?: CallOverrides): Promise<BigNumber>

    'connectorID()'(overrides?: CallOverrides): Promise<BigNumber>

    deposit(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'deposit(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    depositDai(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'depositDai(uint256,uint256,uint256)'(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    exitDai(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'exitDai(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    open(colType: string, overrides?: PayableOverrides): Promise<BigNumber>

    'open(string)'(colType: string, overrides?: PayableOverrides): Promise<BigNumber>

    payback(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'payback(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    transfer(vault: BigNumberish, nextOwner: string, overrides?: PayableOverrides): Promise<BigNumber>

    'transfer(uint256,address)'(
      vault: BigNumberish,
      nextOwner: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    withdraw(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'withdraw(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    withdrawDai(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'withdrawDai(uint256,uint256,uint256)'(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    withdrawLiquidated(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'withdrawLiquidated(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    borrow(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'borrow(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    close(vault: BigNumberish, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'close(uint256)'(vault: BigNumberish, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'connectorID()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    deposit(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'deposit(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    depositDai(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'depositDai(uint256,uint256,uint256)'(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    exitDai(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'exitDai(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    open(colType: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'open(string)'(colType: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    payback(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'payback(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    transfer(vault: BigNumberish, nextOwner: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'transfer(uint256,address)'(
      vault: BigNumberish,
      nextOwner: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    withdraw(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'withdraw(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    withdrawDai(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'withdrawDai(uint256,uint256,uint256)'(
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    withdrawLiquidated(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'withdrawLiquidated(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>
  }
}
