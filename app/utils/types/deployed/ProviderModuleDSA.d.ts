/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ProviderModuleDSAInterface extends ethers.utils.Interface {
  functions: {
    'execPayload(uint256,address,address,tuple,uint256)': FunctionFragment
    'execRevertCheck(bytes)': FunctionFragment
    'gelatoCore()': FunctionFragment
    'index()': FunctionFragment
    'isProvided(address,address,tuple)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'execPayload',
    values: [
      BigNumberish,
      string,
      string,
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(functionFragment: 'execRevertCheck', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'gelatoCore', values?: undefined): string
  encodeFunctionData(functionFragment: 'index', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isProvided',
    values: [
      string,
      string,
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
    ],
  ): string

  decodeFunctionResult(functionFragment: 'execPayload', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execRevertCheck', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'gelatoCore', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'index', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isProvided', data: BytesLike): Result

  events: {}
}

export class ProviderModuleDSA extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ProviderModuleDSAInterface

  functions: {
    execPayload(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      arg4: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      payload: string
      0: string
      1: boolean
    }>

    'execPayload(uint256,address,address,tuple,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      arg4: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      payload: string
      0: string
      1: boolean
    }>

    execRevertCheck(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: void
    }>

    'execRevertCheck(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: void
    }>

    gelatoCore(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'gelatoCore()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    index(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'index()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    isProvided(
      _userProxy: string,
      arg1: string,
      arg2: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'isProvided(address,address,tuple)'(
      _userProxy: string,
      arg1: string,
      arg2: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>
  }

  execPayload(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    arg4: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    payload: string
    0: string
    1: boolean
  }>

  'execPayload(uint256,address,address,tuple,uint256)'(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    arg4: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    payload: string
    0: string
    1: boolean
  }>

  execRevertCheck(arg0: BytesLike, overrides?: CallOverrides): Promise<void>

  'execRevertCheck(bytes)'(arg0: BytesLike, overrides?: CallOverrides): Promise<void>

  gelatoCore(overrides?: CallOverrides): Promise<string>

  'gelatoCore()'(overrides?: CallOverrides): Promise<string>

  index(overrides?: CallOverrides): Promise<string>

  'index()'(overrides?: CallOverrides): Promise<string>

  isProvided(
    _userProxy: string,
    arg1: string,
    arg2: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'isProvided(address,address,tuple)'(
    _userProxy: string,
    arg1: string,
    arg2: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  callStatic: {
    execPayload(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      arg4: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      payload: string
      0: string
      1: boolean
    }>

    'execPayload(uint256,address,address,tuple,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      arg4: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      payload: string
      0: string
      1: boolean
    }>

    execRevertCheck(arg0: BytesLike, overrides?: CallOverrides): Promise<void>

    'execRevertCheck(bytes)'(arg0: BytesLike, overrides?: CallOverrides): Promise<void>

    gelatoCore(overrides?: CallOverrides): Promise<string>

    'gelatoCore()'(overrides?: CallOverrides): Promise<string>

    index(overrides?: CallOverrides): Promise<string>

    'index()'(overrides?: CallOverrides): Promise<string>

    isProvided(
      _userProxy: string,
      arg1: string,
      arg2: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'isProvided(address,address,tuple)'(
      _userProxy: string,
      arg1: string,
      arg2: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>
  }

  filters: {}

  estimateGas: {
    execPayload(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      arg4: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'execPayload(uint256,address,address,tuple,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      arg4: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    execRevertCheck(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'execRevertCheck(bytes)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    gelatoCore(overrides?: CallOverrides): Promise<BigNumber>

    'gelatoCore()'(overrides?: CallOverrides): Promise<BigNumber>

    index(overrides?: CallOverrides): Promise<BigNumber>

    'index()'(overrides?: CallOverrides): Promise<BigNumber>

    isProvided(
      _userProxy: string,
      arg1: string,
      arg2: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'isProvided(address,address,tuple)'(
      _userProxy: string,
      arg1: string,
      arg2: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    execPayload(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      arg4: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'execPayload(uint256,address,address,tuple,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      arg4: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    execRevertCheck(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'execRevertCheck(bytes)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    gelatoCore(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'gelatoCore()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    index(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'index()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isProvided(
      _userProxy: string,
      arg1: string,
      arg2: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'isProvided(address,address,tuple)'(
      _userProxy: string,
      arg1: string,
      arg2: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
