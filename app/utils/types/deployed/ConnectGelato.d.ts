/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ConnectGelatoInterface extends ethers.utils.Interface {
  functions: {
    'connectorID()': FunctionFragment
    'multiCancelTasks(tuple[])': FunctionFragment
    'multiProvide(address,tuple[],address[],uint256,uint256,uint256)': FunctionFragment
    'multiUnprovide(uint256,tuple[],address[],uint256,uint256)': FunctionFragment
    'name()': FunctionFragment
    'submitTask(tuple,tuple,uint256)': FunctionFragment
    'submitTaskChain(tuple,tuple[],uint256,uint256)': FunctionFragment
    'submitTaskCycle(tuple,tuple[],uint256,uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'connectorID', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'multiCancelTasks',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'multiProvide',
    values: [
      string,
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'multiUnprovide',
    values: [
      BigNumberish,
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      string[],
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'submitTask',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'submitTaskChain',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'submitTaskCycle',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      BigNumberish,
      BigNumberish,
    ],
  ): string

  decodeFunctionResult(functionFragment: 'connectorID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiCancelTasks', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiProvide', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiUnprovide', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTask', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTaskChain', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTaskCycle', data: BytesLike): Result

  events: {
    'LogMultiCancelTasks(tuple[],uint256,uint256)': EventFragment
    'LogMultiProvide(address,tuple[],address[],uint256,uint256,uint256)': EventFragment
    'LogMultiUnprovide(tuple[],address[],uint256,uint256,uint256)': EventFragment
    'LogSubmitTask(tuple,tuple,uint256,uint256,uint256)': EventFragment
    'LogSubmitTaskChain(tuple,tuple[],uint256,uint256,uint256)': EventFragment
    'LogSubmitTaskCycle(tuple,tuple[],uint256,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogMultiCancelTasks'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogMultiProvide'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogMultiUnprovide'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSubmitTask'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSubmitTaskChain'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSubmitTaskCycle'): EventFragment
}

export class ConnectGelato extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ConnectGelatoInterface

  functions: {
    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'multiProvide(address,tuple[],address[],uint256,uint256,uint256)'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'multiUnprovide(uint256,tuple[],address[],uint256,uint256)'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    name(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'name()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>
  }

  connectorID(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    _id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'connectorID()'(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    _id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  multiCancelTasks(
    _taskReceipts: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    }[],
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'multiCancelTasks(tuple[])'(
    _taskReceipts: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    }[],
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  multiProvide(
    _executor: string,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    _ethToDeposit: BigNumberish,
    _getId: BigNumberish,
    _setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'multiProvide(address,tuple[],address[],uint256,uint256,uint256)'(
    _executor: string,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    _ethToDeposit: BigNumberish,
    _getId: BigNumberish,
    _setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  multiUnprovide(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    _getId: BigNumberish,
    _setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'multiUnprovide(uint256,tuple[],address[],uint256,uint256)'(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    _getId: BigNumberish,
    _setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  submitTask(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'submitTask(tuple,tuple,uint256)'(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  submitTaskChain(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'submitTaskChain(tuple,tuple[],uint256,uint256)'(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  submitTaskCycle(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  callStatic: {
    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'multiProvide(address,tuple[],address[],uint256,uint256,uint256)'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'multiUnprovide(uint256,tuple[],address[],uint256,uint256)'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    LogMultiCancelTasks(
      taskReceipt:
        | {
            id: BigNumberish
            userProxy: string
            provider: { addr: string; module: string }
            index: BigNumberish
            tasks: {
              conditions: { inst: string; data: BytesLike }[]
              actions: {
                addr: string
                data: BytesLike
                operation: BigNumberish
                dataFlow: BigNumberish
                value: BigNumberish
                termsOkCheck: boolean
              }[]
              selfProviderGasLimit: BigNumberish
              selfProviderGasPriceCeil: BigNumberish
            }[]
            expiryDate: BigNumberish
            cycleId: BigNumberish
            submissionsLeft: BigNumberish
          }[]
        | null,
      getId: null,
      setId: null,
    ): EventFilter

    LogMultiProvide(
      executor: string | null,
      taskspecs:
        | {
            conditions: string[]
            actions: {
              addr: string
              data: BytesLike
              operation: BigNumberish
              dataFlow: BigNumberish
              value: BigNumberish
              termsOkCheck: boolean
            }[]
            gasPriceCeil: BigNumberish
          }[]
        | null,
      modules: string[] | null,
      ethToDeposit: null,
      getId: null,
      setId: null,
    ): EventFilter

    LogMultiUnprovide(
      taskspecs:
        | {
            conditions: string[]
            actions: {
              addr: string
              data: BytesLike
              operation: BigNumberish
              dataFlow: BigNumberish
              value: BigNumberish
              termsOkCheck: boolean
            }[]
            gasPriceCeil: BigNumberish
          }[]
        | null,
      modules: string[] | null,
      ethToWithdraw: null,
      getId: null,
      setId: null,
    ): EventFilter

    LogSubmitTask(
      provider: { addr: string; module: string } | null,
      task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      } | null,
      expiryDate: BigNumberish | null,
      getId: null,
      setId: null,
    ): EventFilter

    LogSubmitTaskChain(
      provider: { addr: string; module: string } | null,
      tasks:
        | {
            conditions: { inst: string; data: BytesLike }[]
            actions: {
              addr: string
              data: BytesLike
              operation: BigNumberish
              dataFlow: BigNumberish
              value: BigNumberish
              termsOkCheck: boolean
            }[]
            selfProviderGasLimit: BigNumberish
            selfProviderGasPriceCeil: BigNumberish
          }[]
        | null,
      expiryDate: BigNumberish | null,
      getId: null,
      setId: null,
    ): EventFilter

    LogSubmitTaskCycle(
      provider: { addr: string; module: string } | null,
      tasks:
        | {
            conditions: { inst: string; data: BytesLike }[]
            actions: {
              addr: string
              data: BytesLike
              operation: BigNumberish
              dataFlow: BigNumberish
              value: BigNumberish
              termsOkCheck: boolean
            }[]
            selfProviderGasLimit: BigNumberish
            selfProviderGasPriceCeil: BigNumberish
          }[]
        | null,
      expiryDate: BigNumberish | null,
      getId: null,
      setId: null,
    ): EventFilter
  }

  estimateGas: {
    connectorID(overrides?: CallOverrides): Promise<BigNumber>

    'connectorID()'(overrides?: CallOverrides): Promise<BigNumber>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'multiProvide(address,tuple[],address[],uint256,uint256,uint256)'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'multiUnprovide(uint256,tuple[],address[],uint256,uint256)'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'connectorID()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'multiProvide(address,tuple[],address[],uint256,uint256,uint256)'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'multiUnprovide(uint256,tuple[],address[],uint256,uint256)'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>
  }
}
