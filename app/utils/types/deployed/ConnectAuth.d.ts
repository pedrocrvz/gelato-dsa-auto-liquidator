/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ConnectAuthInterface extends ethers.utils.Interface {
  functions: {
    'add(address)': FunctionFragment
    'connectorID()': FunctionFragment
    'name()': FunctionFragment
    'remove(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'add', values: [string]): string
  encodeFunctionData(functionFragment: 'connectorID', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'remove', values: [string]): string

  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'connectorID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'remove', data: BytesLike): Result

  events: {
    'LogAddAuth(address,address)': EventFragment
    'LogRemoveAuth(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogAddAuth'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogRemoveAuth'): EventFragment
}

export class ConnectAuth extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ConnectAuthInterface

  functions: {
    add(authority: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    'add(address)'(authority: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    name(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'name()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    remove(authority: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    'remove(address)'(authority: string, overrides?: PayableOverrides): Promise<ContractTransaction>
  }

  add(authority: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  'add(address)'(authority: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  connectorID(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    _id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'connectorID()'(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    _id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  remove(authority: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  'remove(address)'(authority: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  callStatic: {
    add(authority: string, overrides?: CallOverrides): Promise<void>

    'add(address)'(authority: string, overrides?: CallOverrides): Promise<void>

    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      _id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    remove(authority: string, overrides?: CallOverrides): Promise<void>

    'remove(address)'(authority: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    LogAddAuth(_msgSender: string | null, _authority: string | null): EventFilter

    LogRemoveAuth(_msgSender: string | null, _authority: string | null): EventFilter
  }

  estimateGas: {
    add(authority: string, overrides?: PayableOverrides): Promise<BigNumber>

    'add(address)'(authority: string, overrides?: PayableOverrides): Promise<BigNumber>

    connectorID(overrides?: CallOverrides): Promise<BigNumber>

    'connectorID()'(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    remove(authority: string, overrides?: PayableOverrides): Promise<BigNumber>

    'remove(address)'(authority: string, overrides?: PayableOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    add(authority: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'add(address)'(authority: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'connectorID()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    remove(authority: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'remove(address)'(authority: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>
  }
}
