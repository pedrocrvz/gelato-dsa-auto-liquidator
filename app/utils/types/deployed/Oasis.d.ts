/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface OasisInterface extends ethers.utils.Interface {
  functions: {
    '_best(address,address)': FunctionFragment
    '_dust(address)': FunctionFragment
    '_near(uint256)': FunctionFragment
    '_rank(uint256)': FunctionFragment
    '_span(address,address)': FunctionFragment
    'authority()': FunctionFragment
    'bump(bytes32)': FunctionFragment
    'buy(uint256,uint256)': FunctionFragment
    'buyAllAmount(address,uint256,address,uint256)': FunctionFragment
    'buyEnabled()': FunctionFragment
    'cancel(uint256)': FunctionFragment
    'close_time()': FunctionFragment
    'del_rank(uint256)': FunctionFragment
    'dustId()': FunctionFragment
    'getBestOffer(address,address)': FunctionFragment
    'getBetterOffer(uint256)': FunctionFragment
    'getBuyAmount(address,address,uint256)': FunctionFragment
    'getFirstUnsortedOffer()': FunctionFragment
    'getMinSell(address)': FunctionFragment
    'getNextUnsortedOffer(uint256)': FunctionFragment
    'getOffer(uint256)': FunctionFragment
    'getOfferCount(address,address)': FunctionFragment
    'getOwner(uint256)': FunctionFragment
    'getPayAmount(address,address,uint256)': FunctionFragment
    'getTime()': FunctionFragment
    'getWorseOffer(uint256)': FunctionFragment
    'insert(uint256,uint256)': FunctionFragment
    'isActive(uint256)': FunctionFragment
    'isClosed()': FunctionFragment
    'isOfferSorted(uint256)': FunctionFragment
    'kill(bytes32)': FunctionFragment
    'last_offer_id()': FunctionFragment
    'make(address,address,uint128,uint128)': FunctionFragment
    'matchingEnabled()': FunctionFragment
    'offer(uint256,address,uint256,address,uint256)': FunctionFragment
    'offers(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'sellAllAmount(address,uint256,address,uint256)': FunctionFragment
    'setAuthority(address)': FunctionFragment
    'setBuyEnabled(bool)': FunctionFragment
    'setMatchingEnabled(bool)': FunctionFragment
    'setMinSell(address,uint256)': FunctionFragment
    'setOwner(address)': FunctionFragment
    'stop()': FunctionFragment
    'stopped()': FunctionFragment
    'take(bytes32,uint128)': FunctionFragment
  }

  encodeFunctionData(functionFragment: '_best', values: [string, string]): string
  encodeFunctionData(functionFragment: '_dust', values: [string]): string
  encodeFunctionData(functionFragment: '_near', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: '_rank', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: '_span', values: [string, string]): string
  encodeFunctionData(functionFragment: 'authority', values?: undefined): string
  encodeFunctionData(functionFragment: 'bump', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'buy', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'buyAllAmount', values: [string, BigNumberish, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'buyEnabled', values?: undefined): string
  encodeFunctionData(functionFragment: 'cancel', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'close_time', values?: undefined): string
  encodeFunctionData(functionFragment: 'del_rank', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'dustId', values?: undefined): string
  encodeFunctionData(functionFragment: 'getBestOffer', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getBetterOffer', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getBuyAmount', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getFirstUnsortedOffer', values?: undefined): string
  encodeFunctionData(functionFragment: 'getMinSell', values: [string]): string
  encodeFunctionData(functionFragment: 'getNextUnsortedOffer', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getOffer', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getOfferCount', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getOwner', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getPayAmount', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getTime', values?: undefined): string
  encodeFunctionData(functionFragment: 'getWorseOffer', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'insert', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'isActive', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'isClosed', values?: undefined): string
  encodeFunctionData(functionFragment: 'isOfferSorted', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'kill', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'last_offer_id', values?: undefined): string
  encodeFunctionData(functionFragment: 'make', values: [string, string, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'matchingEnabled', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'offer',
    values: [BigNumberish, string, BigNumberish, string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'offers', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'sellAllAmount', values: [string, BigNumberish, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setAuthority', values: [string]): string
  encodeFunctionData(functionFragment: 'setBuyEnabled', values: [boolean]): string
  encodeFunctionData(functionFragment: 'setMatchingEnabled', values: [boolean]): string
  encodeFunctionData(functionFragment: 'setMinSell', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setOwner', values: [string]): string
  encodeFunctionData(functionFragment: 'stop', values?: undefined): string
  encodeFunctionData(functionFragment: 'stopped', values?: undefined): string
  encodeFunctionData(functionFragment: 'take', values: [BytesLike, BigNumberish]): string

  decodeFunctionResult(functionFragment: '_best', data: BytesLike): Result
  decodeFunctionResult(functionFragment: '_dust', data: BytesLike): Result
  decodeFunctionResult(functionFragment: '_near', data: BytesLike): Result
  decodeFunctionResult(functionFragment: '_rank', data: BytesLike): Result
  decodeFunctionResult(functionFragment: '_span', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bump', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyAllAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'close_time', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'del_rank', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dustId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getBestOffer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getBetterOffer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getBuyAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getFirstUnsortedOffer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getMinSell', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNextUnsortedOffer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getOffer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getOfferCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPayAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getWorseOffer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'insert', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isActive', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isClosed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOfferSorted', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'kill', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'last_offer_id', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'make', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'matchingEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'offer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'offers', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sellAllAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAuthority', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBuyEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMatchingEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMinSell', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stop', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stopped', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'take', data: BytesLike): Result

  events: {
    'LogBump(bytes32,bytes32,address,address,address,uint128,uint128,uint64)': EventFragment
    'LogBuyEnabled(bool)': EventFragment
    'LogDelete(address,uint256)': EventFragment
    'LogInsert(address,uint256)': EventFragment
    'LogItemUpdate(uint256)': EventFragment
    'LogKill(bytes32,bytes32,address,address,address,uint128,uint128,uint64)': EventFragment
    'LogMake(bytes32,bytes32,address,address,address,uint128,uint128,uint64)': EventFragment
    'LogMatchingEnabled(bool)': EventFragment
    'LogMinSell(address,uint256)': EventFragment
    'LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)': EventFragment
    'LogSetAuthority(address)': EventFragment
    'LogSetOwner(address)': EventFragment
    'LogSortedOffer(uint256)': EventFragment
    'LogTake(bytes32,bytes32,address,address,address,address,uint128,uint128,uint64)': EventFragment
    'LogTrade(uint256,address,uint256,address)': EventFragment
    'LogUnsortedOffer(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogBump'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogBuyEnabled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogDelete'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogInsert'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogItemUpdate'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogKill'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogMake'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogMatchingEnabled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogMinSell'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogNote'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSetAuthority'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSetOwner'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSortedOffer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTake'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTrade'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogUnsortedOffer'): EventFragment
}

export class Oasis extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: OasisInterface

  functions: {
    _best(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    '_best(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    _dust(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    '_dust(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    _near(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    '_near(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    _rank(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      next: BigNumber
      prev: BigNumber
      delb: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    '_rank(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      next: BigNumber
      prev: BigNumber
      delb: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    _span(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    '_span(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    authority(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'authority()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    bump(id_: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

    'bump(bytes32)'(id_: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

    buy(id: BigNumberish, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'buy(uint256,uint256)'(id: BigNumberish, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    buyAllAmount(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'buyAllAmount(address,uint256,address,uint256)'(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    buyEnabled(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'buyEnabled()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    cancel(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'cancel(uint256)'(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    close_time(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'close_time()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    del_rank(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'del_rank(uint256)'(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    dustId(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'dustId()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getBestOffer(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'getBestOffer(address,address)'(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getBetterOffer(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'getBetterOffer(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getBuyAmount(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      fill_amt: BigNumber
      0: BigNumber
    }>

    'getBuyAmount(address,address,uint256)'(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      fill_amt: BigNumber
      0: BigNumber
    }>

    getFirstUnsortedOffer(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'getFirstUnsortedOffer()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getMinSell(
      pay_gem: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'getMinSell(address)'(
      pay_gem: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getNextUnsortedOffer(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'getNextUnsortedOffer(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getOffer(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: string
      2: BigNumber
      3: string
    }>

    'getOffer(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: string
      2: BigNumber
      3: string
    }>

    getOfferCount(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'getOfferCount(address,address)'(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getOwner(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      owner: string
      0: string
    }>

    'getOwner(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      owner: string
      0: string
    }>

    getPayAmount(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      fill_amt: BigNumber
      0: BigNumber
    }>

    'getPayAmount(address,address,uint256)'(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      fill_amt: BigNumber
      0: BigNumber
    }>

    getTime(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'getTime()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getWorseOffer(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'getWorseOffer(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    insert(id: BigNumberish, pos: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'insert(uint256,uint256)'(id: BigNumberish, pos: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    isActive(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      active: boolean
      0: boolean
    }>

    'isActive(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      active: boolean
      0: boolean
    }>

    isClosed(
      overrides?: CallOverrides,
    ): Promise<{
      closed: boolean
      0: boolean
    }>

    'isClosed()'(
      overrides?: CallOverrides,
    ): Promise<{
      closed: boolean
      0: boolean
    }>

    isOfferSorted(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isOfferSorted(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    kill(id: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

    'kill(bytes32)'(id: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

    last_offer_id(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'last_offer_id()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'make(address,address,uint128,uint128)'(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    matchingEnabled(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'matchingEnabled()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'offer(uint256,address,uint256,address,uint256)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'offer(uint256,address,uint256,address,uint256,bool)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      rounding: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'offer(uint256,address,uint256,address)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      pay_amt: BigNumber
      pay_gem: string
      buy_amt: BigNumber
      buy_gem: string
      owner: string
      timestamp: BigNumber
      0: BigNumber
      1: string
      2: BigNumber
      3: string
      4: string
      5: BigNumber
    }>

    'offers(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      pay_amt: BigNumber
      pay_gem: string
      buy_amt: BigNumber
      buy_gem: string
      owner: string
      timestamp: BigNumber
      0: BigNumber
      1: string
      2: BigNumber
      3: string
      4: string
      5: BigNumber
    }>

    owner(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'owner()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    sellAllAmount(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'sellAllAmount(address,uint256,address,uint256)'(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    setAuthority(authority_: string, overrides?: Overrides): Promise<ContractTransaction>

    'setAuthority(address)'(authority_: string, overrides?: Overrides): Promise<ContractTransaction>

    setBuyEnabled(buyEnabled_: boolean, overrides?: Overrides): Promise<ContractTransaction>

    'setBuyEnabled(bool)'(buyEnabled_: boolean, overrides?: Overrides): Promise<ContractTransaction>

    setMatchingEnabled(matchingEnabled_: boolean, overrides?: Overrides): Promise<ContractTransaction>

    'setMatchingEnabled(bool)'(matchingEnabled_: boolean, overrides?: Overrides): Promise<ContractTransaction>

    setMinSell(pay_gem: string, dust: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'setMinSell(address,uint256)'(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    setOwner(owner_: string, overrides?: Overrides): Promise<ContractTransaction>

    'setOwner(address)'(owner_: string, overrides?: Overrides): Promise<ContractTransaction>

    stop(overrides?: Overrides): Promise<ContractTransaction>

    'stop()'(overrides?: Overrides): Promise<ContractTransaction>

    stopped(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'stopped()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    take(id: BytesLike, maxTakeAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'take(bytes32,uint128)'(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>
  }

  _best(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  '_best(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  _dust(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  '_dust(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  _near(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  '_near(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  _rank(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    next: BigNumber
    prev: BigNumber
    delb: BigNumber
    0: BigNumber
    1: BigNumber
    2: BigNumber
  }>

  '_rank(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    next: BigNumber
    prev: BigNumber
    delb: BigNumber
    0: BigNumber
    1: BigNumber
    2: BigNumber
  }>

  _span(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  '_span(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  authority(overrides?: CallOverrides): Promise<string>

  'authority()'(overrides?: CallOverrides): Promise<string>

  bump(id_: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

  'bump(bytes32)'(id_: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

  buy(id: BigNumberish, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'buy(uint256,uint256)'(id: BigNumberish, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  buyAllAmount(
    buy_gem: string,
    buy_amt: BigNumberish,
    pay_gem: string,
    max_fill_amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'buyAllAmount(address,uint256,address,uint256)'(
    buy_gem: string,
    buy_amt: BigNumberish,
    pay_gem: string,
    max_fill_amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  buyEnabled(overrides?: CallOverrides): Promise<boolean>

  'buyEnabled()'(overrides?: CallOverrides): Promise<boolean>

  cancel(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'cancel(uint256)'(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  close_time(overrides?: CallOverrides): Promise<BigNumber>

  'close_time()'(overrides?: CallOverrides): Promise<BigNumber>

  del_rank(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'del_rank(uint256)'(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  dustId(overrides?: CallOverrides): Promise<BigNumber>

  'dustId()'(overrides?: CallOverrides): Promise<BigNumber>

  getBestOffer(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

  'getBestOffer(address,address)'(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

  getBetterOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'getBetterOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  getBuyAmount(buy_gem: string, pay_gem: string, pay_amt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'getBuyAmount(address,address,uint256)'(
    buy_gem: string,
    pay_gem: string,
    pay_amt: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getFirstUnsortedOffer(overrides?: CallOverrides): Promise<BigNumber>

  'getFirstUnsortedOffer()'(overrides?: CallOverrides): Promise<BigNumber>

  getMinSell(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>

  'getMinSell(address)'(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>

  getNextUnsortedOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'getNextUnsortedOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  getOffer(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    0: BigNumber
    1: string
    2: BigNumber
    3: string
  }>

  'getOffer(uint256)'(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    0: BigNumber
    1: string
    2: BigNumber
    3: string
  }>

  getOfferCount(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

  'getOfferCount(address,address)'(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

  getOwner(id: BigNumberish, overrides?: CallOverrides): Promise<string>

  'getOwner(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<string>

  getPayAmount(pay_gem: string, buy_gem: string, buy_amt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'getPayAmount(address,address,uint256)'(
    pay_gem: string,
    buy_gem: string,
    buy_amt: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getTime(overrides?: CallOverrides): Promise<BigNumber>

  'getTime()'(overrides?: CallOverrides): Promise<BigNumber>

  getWorseOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'getWorseOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  insert(id: BigNumberish, pos: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'insert(uint256,uint256)'(id: BigNumberish, pos: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  isActive(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  'isActive(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  isClosed(overrides?: CallOverrides): Promise<boolean>

  'isClosed()'(overrides?: CallOverrides): Promise<boolean>

  isOfferSorted(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  'isOfferSorted(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  kill(id: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

  'kill(bytes32)'(id: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

  last_offer_id(overrides?: CallOverrides): Promise<BigNumber>

  'last_offer_id()'(overrides?: CallOverrides): Promise<BigNumber>

  make(
    pay_gem: string,
    buy_gem: string,
    pay_amt: BigNumberish,
    buy_amt: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'make(address,address,uint128,uint128)'(
    pay_gem: string,
    buy_gem: string,
    pay_amt: BigNumberish,
    buy_amt: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  matchingEnabled(overrides?: CallOverrides): Promise<boolean>

  'matchingEnabled()'(overrides?: CallOverrides): Promise<boolean>

  'offer(uint256,address,uint256,address,uint256)'(
    pay_amt: BigNumberish,
    pay_gem: string,
    buy_amt: BigNumberish,
    buy_gem: string,
    pos: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'offer(uint256,address,uint256,address,uint256,bool)'(
    pay_amt: BigNumberish,
    pay_gem: string,
    buy_amt: BigNumberish,
    buy_gem: string,
    pos: BigNumberish,
    rounding: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'offer(uint256,address,uint256,address)'(
    pay_amt: BigNumberish,
    pay_gem: string,
    buy_amt: BigNumberish,
    buy_gem: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  offers(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    pay_amt: BigNumber
    pay_gem: string
    buy_amt: BigNumber
    buy_gem: string
    owner: string
    timestamp: BigNumber
    0: BigNumber
    1: string
    2: BigNumber
    3: string
    4: string
    5: BigNumber
  }>

  'offers(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    pay_amt: BigNumber
    pay_gem: string
    buy_amt: BigNumber
    buy_gem: string
    owner: string
    timestamp: BigNumber
    0: BigNumber
    1: string
    2: BigNumber
    3: string
    4: string
    5: BigNumber
  }>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  sellAllAmount(
    pay_gem: string,
    pay_amt: BigNumberish,
    buy_gem: string,
    min_fill_amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'sellAllAmount(address,uint256,address,uint256)'(
    pay_gem: string,
    pay_amt: BigNumberish,
    buy_gem: string,
    min_fill_amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  setAuthority(authority_: string, overrides?: Overrides): Promise<ContractTransaction>

  'setAuthority(address)'(authority_: string, overrides?: Overrides): Promise<ContractTransaction>

  setBuyEnabled(buyEnabled_: boolean, overrides?: Overrides): Promise<ContractTransaction>

  'setBuyEnabled(bool)'(buyEnabled_: boolean, overrides?: Overrides): Promise<ContractTransaction>

  setMatchingEnabled(matchingEnabled_: boolean, overrides?: Overrides): Promise<ContractTransaction>

  'setMatchingEnabled(bool)'(matchingEnabled_: boolean, overrides?: Overrides): Promise<ContractTransaction>

  setMinSell(pay_gem: string, dust: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'setMinSell(address,uint256)'(
    pay_gem: string,
    dust: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  setOwner(owner_: string, overrides?: Overrides): Promise<ContractTransaction>

  'setOwner(address)'(owner_: string, overrides?: Overrides): Promise<ContractTransaction>

  stop(overrides?: Overrides): Promise<ContractTransaction>

  'stop()'(overrides?: Overrides): Promise<ContractTransaction>

  stopped(overrides?: CallOverrides): Promise<boolean>

  'stopped()'(overrides?: CallOverrides): Promise<boolean>

  take(id: BytesLike, maxTakeAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'take(bytes32,uint128)'(
    id: BytesLike,
    maxTakeAmount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  callStatic: {
    _best(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    '_best(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    _dust(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    '_dust(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    _near(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    '_near(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    _rank(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      next: BigNumber
      prev: BigNumber
      delb: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    '_rank(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      next: BigNumber
      prev: BigNumber
      delb: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    _span(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    '_span(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    authority(overrides?: CallOverrides): Promise<string>

    'authority()'(overrides?: CallOverrides): Promise<string>

    bump(id_: BytesLike, overrides?: CallOverrides): Promise<void>

    'bump(bytes32)'(id_: BytesLike, overrides?: CallOverrides): Promise<void>

    buy(id: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'buy(uint256,uint256)'(id: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    buyAllAmount(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'buyAllAmount(address,uint256,address,uint256)'(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    buyEnabled(overrides?: CallOverrides): Promise<boolean>

    'buyEnabled()'(overrides?: CallOverrides): Promise<boolean>

    cancel(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'cancel(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    close_time(overrides?: CallOverrides): Promise<BigNumber>

    'close_time()'(overrides?: CallOverrides): Promise<BigNumber>

    del_rank(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'del_rank(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    dustId(overrides?: CallOverrides): Promise<BigNumber>

    'dustId()'(overrides?: CallOverrides): Promise<BigNumber>

    getBestOffer(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    'getBestOffer(address,address)'(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    getBetterOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getBetterOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getBuyAmount(buy_gem: string, pay_gem: string, pay_amt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getBuyAmount(address,address,uint256)'(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getFirstUnsortedOffer(overrides?: CallOverrides): Promise<BigNumber>

    'getFirstUnsortedOffer()'(overrides?: CallOverrides): Promise<BigNumber>

    getMinSell(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    'getMinSell(address)'(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    getNextUnsortedOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getNextUnsortedOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getOffer(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: string
      2: BigNumber
      3: string
    }>

    'getOffer(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: string
      2: BigNumber
      3: string
    }>

    getOfferCount(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    'getOfferCount(address,address)'(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    getOwner(id: BigNumberish, overrides?: CallOverrides): Promise<string>

    'getOwner(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<string>

    getPayAmount(pay_gem: string, buy_gem: string, buy_amt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getPayAmount(address,address,uint256)'(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTime(overrides?: CallOverrides): Promise<BigNumber>

    'getTime()'(overrides?: CallOverrides): Promise<BigNumber>

    getWorseOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getWorseOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    insert(id: BigNumberish, pos: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'insert(uint256,uint256)'(id: BigNumberish, pos: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    isActive(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'isActive(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    isClosed(overrides?: CallOverrides): Promise<boolean>

    'isClosed()'(overrides?: CallOverrides): Promise<boolean>

    isOfferSorted(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'isOfferSorted(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    kill(id: BytesLike, overrides?: CallOverrides): Promise<void>

    'kill(bytes32)'(id: BytesLike, overrides?: CallOverrides): Promise<void>

    last_offer_id(overrides?: CallOverrides): Promise<BigNumber>

    'last_offer_id()'(overrides?: CallOverrides): Promise<BigNumber>

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    'make(address,address,uint128,uint128)'(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    matchingEnabled(overrides?: CallOverrides): Promise<boolean>

    'matchingEnabled()'(overrides?: CallOverrides): Promise<boolean>

    'offer(uint256,address,uint256,address,uint256)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'offer(uint256,address,uint256,address,uint256,bool)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      rounding: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'offer(uint256,address,uint256,address)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      pay_amt: BigNumber
      pay_gem: string
      buy_amt: BigNumber
      buy_gem: string
      owner: string
      timestamp: BigNumber
      0: BigNumber
      1: string
      2: BigNumber
      3: string
      4: string
      5: BigNumber
    }>

    'offers(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      pay_amt: BigNumber
      pay_gem: string
      buy_amt: BigNumber
      buy_gem: string
      owner: string
      timestamp: BigNumber
      0: BigNumber
      1: string
      2: BigNumber
      3: string
      4: string
      5: BigNumber
    }>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    sellAllAmount(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'sellAllAmount(address,uint256,address,uint256)'(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    setAuthority(authority_: string, overrides?: CallOverrides): Promise<void>

    'setAuthority(address)'(authority_: string, overrides?: CallOverrides): Promise<void>

    setBuyEnabled(buyEnabled_: boolean, overrides?: CallOverrides): Promise<boolean>

    'setBuyEnabled(bool)'(buyEnabled_: boolean, overrides?: CallOverrides): Promise<boolean>

    setMatchingEnabled(matchingEnabled_: boolean, overrides?: CallOverrides): Promise<boolean>

    'setMatchingEnabled(bool)'(matchingEnabled_: boolean, overrides?: CallOverrides): Promise<boolean>

    setMinSell(pay_gem: string, dust: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'setMinSell(address,uint256)'(pay_gem: string, dust: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    setOwner(owner_: string, overrides?: CallOverrides): Promise<void>

    'setOwner(address)'(owner_: string, overrides?: CallOverrides): Promise<void>

    stop(overrides?: CallOverrides): Promise<void>

    'stop()'(overrides?: CallOverrides): Promise<void>

    stopped(overrides?: CallOverrides): Promise<boolean>

    'stopped()'(overrides?: CallOverrides): Promise<boolean>

    take(id: BytesLike, maxTakeAmount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'take(bytes32,uint128)'(id: BytesLike, maxTakeAmount: BigNumberish, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    LogBump(
      id: BytesLike | null,
      pair: BytesLike | null,
      maker: string | null,
      pay_gem: null,
      buy_gem: null,
      pay_amt: null,
      buy_amt: null,
      timestamp: null,
    ): EventFilter

    LogBuyEnabled(isEnabled: null): EventFilter

    LogDelete(keeper: null, id: null): EventFilter

    LogInsert(keeper: null, id: null): EventFilter

    LogItemUpdate(id: null): EventFilter

    LogKill(
      id: BytesLike | null,
      pair: BytesLike | null,
      maker: string | null,
      pay_gem: null,
      buy_gem: null,
      pay_amt: null,
      buy_amt: null,
      timestamp: null,
    ): EventFilter

    LogMake(
      id: BytesLike | null,
      pair: BytesLike | null,
      maker: string | null,
      pay_gem: null,
      buy_gem: null,
      pay_amt: null,
      buy_amt: null,
      timestamp: null,
    ): EventFilter

    LogMatchingEnabled(isEnabled: null): EventFilter

    LogMinSell(pay_gem: null, min_amount: null): EventFilter

    LogNote(
      sig: BytesLike | null,
      guy: string | null,
      foo: BytesLike | null,
      bar: BytesLike | null,
      wad: null,
      fax: null,
    ): EventFilter

    LogSetAuthority(authority: string | null): EventFilter

    LogSetOwner(owner: string | null): EventFilter

    LogSortedOffer(id: null): EventFilter

    LogTake(
      id: null,
      pair: BytesLike | null,
      maker: string | null,
      pay_gem: null,
      buy_gem: null,
      taker: string | null,
      take_amt: null,
      give_amt: null,
      timestamp: null,
    ): EventFilter

    LogTrade(pay_amt: null, pay_gem: string | null, buy_amt: null, buy_gem: string | null): EventFilter

    LogUnsortedOffer(id: null): EventFilter
  }

  estimateGas: {
    _best(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    '_best(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    _dust(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    '_dust(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    _near(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    '_near(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    _rank(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    '_rank(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    _span(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    '_span(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    authority(overrides?: CallOverrides): Promise<BigNumber>

    'authority()'(overrides?: CallOverrides): Promise<BigNumber>

    bump(id_: BytesLike, overrides?: Overrides): Promise<BigNumber>

    'bump(bytes32)'(id_: BytesLike, overrides?: Overrides): Promise<BigNumber>

    buy(id: BigNumberish, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'buy(uint256,uint256)'(id: BigNumberish, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    buyAllAmount(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'buyAllAmount(address,uint256,address,uint256)'(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    buyEnabled(overrides?: CallOverrides): Promise<BigNumber>

    'buyEnabled()'(overrides?: CallOverrides): Promise<BigNumber>

    cancel(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'cancel(uint256)'(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    close_time(overrides?: CallOverrides): Promise<BigNumber>

    'close_time()'(overrides?: CallOverrides): Promise<BigNumber>

    del_rank(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'del_rank(uint256)'(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    dustId(overrides?: CallOverrides): Promise<BigNumber>

    'dustId()'(overrides?: CallOverrides): Promise<BigNumber>

    getBestOffer(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    'getBestOffer(address,address)'(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    getBetterOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getBetterOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getBuyAmount(buy_gem: string, pay_gem: string, pay_amt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getBuyAmount(address,address,uint256)'(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getFirstUnsortedOffer(overrides?: CallOverrides): Promise<BigNumber>

    'getFirstUnsortedOffer()'(overrides?: CallOverrides): Promise<BigNumber>

    getMinSell(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    'getMinSell(address)'(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    getNextUnsortedOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getNextUnsortedOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getOfferCount(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    'getOfferCount(address,address)'(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<BigNumber>

    getOwner(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getOwner(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getPayAmount(pay_gem: string, buy_gem: string, buy_amt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getPayAmount(address,address,uint256)'(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTime(overrides?: CallOverrides): Promise<BigNumber>

    'getTime()'(overrides?: CallOverrides): Promise<BigNumber>

    getWorseOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getWorseOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    insert(id: BigNumberish, pos: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'insert(uint256,uint256)'(id: BigNumberish, pos: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    isActive(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'isActive(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    isClosed(overrides?: CallOverrides): Promise<BigNumber>

    'isClosed()'(overrides?: CallOverrides): Promise<BigNumber>

    isOfferSorted(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'isOfferSorted(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    kill(id: BytesLike, overrides?: Overrides): Promise<BigNumber>

    'kill(bytes32)'(id: BytesLike, overrides?: Overrides): Promise<BigNumber>

    last_offer_id(overrides?: CallOverrides): Promise<BigNumber>

    'last_offer_id()'(overrides?: CallOverrides): Promise<BigNumber>

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'make(address,address,uint128,uint128)'(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    matchingEnabled(overrides?: CallOverrides): Promise<BigNumber>

    'matchingEnabled()'(overrides?: CallOverrides): Promise<BigNumber>

    'offer(uint256,address,uint256,address,uint256)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'offer(uint256,address,uint256,address,uint256,bool)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      rounding: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'offer(uint256,address,uint256,address)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    offers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'offers(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    sellAllAmount(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'sellAllAmount(address,uint256,address,uint256)'(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    setAuthority(authority_: string, overrides?: Overrides): Promise<BigNumber>

    'setAuthority(address)'(authority_: string, overrides?: Overrides): Promise<BigNumber>

    setBuyEnabled(buyEnabled_: boolean, overrides?: Overrides): Promise<BigNumber>

    'setBuyEnabled(bool)'(buyEnabled_: boolean, overrides?: Overrides): Promise<BigNumber>

    setMatchingEnabled(matchingEnabled_: boolean, overrides?: Overrides): Promise<BigNumber>

    'setMatchingEnabled(bool)'(matchingEnabled_: boolean, overrides?: Overrides): Promise<BigNumber>

    setMinSell(pay_gem: string, dust: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'setMinSell(address,uint256)'(pay_gem: string, dust: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    setOwner(owner_: string, overrides?: Overrides): Promise<BigNumber>

    'setOwner(address)'(owner_: string, overrides?: Overrides): Promise<BigNumber>

    stop(overrides?: Overrides): Promise<BigNumber>

    'stop()'(overrides?: Overrides): Promise<BigNumber>

    stopped(overrides?: CallOverrides): Promise<BigNumber>

    'stopped()'(overrides?: CallOverrides): Promise<BigNumber>

    take(id: BytesLike, maxTakeAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'take(bytes32,uint128)'(id: BytesLike, maxTakeAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    _best(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    '_best(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    _dust(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    '_dust(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    _near(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    '_near(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    _rank(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    '_rank(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    _span(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    '_span(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'authority()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    bump(id_: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>

    'bump(bytes32)'(id_: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>

    buy(id: BigNumberish, amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'buy(uint256,uint256)'(id: BigNumberish, amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    buyAllAmount(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'buyAllAmount(address,uint256,address,uint256)'(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    buyEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'buyEnabled()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    cancel(id: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'cancel(uint256)'(id: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    close_time(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'close_time()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    del_rank(id: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'del_rank(uint256)'(id: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    dustId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'dustId()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBestOffer(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBestOffer(address,address)'(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getBetterOffer(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBetterOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBuyAmount(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getBuyAmount(address,address,uint256)'(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getFirstUnsortedOffer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getFirstUnsortedOffer()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getMinSell(pay_gem: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getMinSell(address)'(pay_gem: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNextUnsortedOffer(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getNextUnsortedOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getOffer(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getOfferCount(sell_gem: string, buy_gem: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getOfferCount(address,address)'(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getOwner(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getOwner(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPayAmount(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getPayAmount(address,address,uint256)'(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getTime()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getWorseOffer(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getWorseOffer(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    insert(id: BigNumberish, pos: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'insert(uint256,uint256)'(id: BigNumberish, pos: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    isActive(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isActive(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isClosed()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isOfferSorted(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOfferSorted(uint256)'(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    kill(id: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>

    'kill(bytes32)'(id: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>

    last_offer_id(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'last_offer_id()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'make(address,address,uint128,uint128)'(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    matchingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'matchingEnabled()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'offer(uint256,address,uint256,address,uint256)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'offer(uint256,address,uint256,address,uint256,bool)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      rounding: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'offer(uint256,address,uint256,address)'(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    offers(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'offers(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sellAllAmount(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'sellAllAmount(address,uint256,address,uint256)'(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    setAuthority(authority_: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'setAuthority(address)'(authority_: string, overrides?: Overrides): Promise<PopulatedTransaction>

    setBuyEnabled(buyEnabled_: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

    'setBuyEnabled(bool)'(buyEnabled_: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

    setMatchingEnabled(matchingEnabled_: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

    'setMatchingEnabled(bool)'(matchingEnabled_: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

    setMinSell(pay_gem: string, dust: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'setMinSell(address,uint256)'(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    setOwner(owner_: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'setOwner(address)'(owner_: string, overrides?: Overrides): Promise<PopulatedTransaction>

    stop(overrides?: Overrides): Promise<PopulatedTransaction>

    'stop()'(overrides?: Overrides): Promise<PopulatedTransaction>

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'stopped()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    take(id: BytesLike, maxTakeAmount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'take(bytes32,uint128)'(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>
  }
}
