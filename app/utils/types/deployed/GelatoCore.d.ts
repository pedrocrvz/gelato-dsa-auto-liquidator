/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface GelatoCoreInterface extends ethers.utils.Interface {
  functions: {
    'EXEC_TX_OVERHEAD()': FunctionFragment
    'NO_CEIL()': FunctionFragment
    'addProviderModules(address[])': FunctionFragment
    'canExec(tuple,uint256,uint256)': FunctionFragment
    'canSubmitTask(address,tuple,tuple,uint256)': FunctionFragment
    'cancelTask(tuple)': FunctionFragment
    'currentTaskReceiptId()': FunctionFragment
    'exec(tuple)': FunctionFragment
    'executionWrapper(tuple,uint256,uint256)': FunctionFragment
    'executorAssignsExecutor(address,address)': FunctionFragment
    'executorByProvider(address)': FunctionFragment
    'executorProvidersCount(address)': FunctionFragment
    'executorStake(address)': FunctionFragment
    'executorSuccessFee(uint256,uint256)': FunctionFragment
    'executorSuccessShare()': FunctionFragment
    'gelatoGasPriceOracle()': FunctionFragment
    'gelatoMaxGas()': FunctionFragment
    'hashTaskReceipt(tuple)': FunctionFragment
    'hashTaskSpec(tuple)': FunctionFragment
    'internalGasRequirement()': FunctionFragment
    'isExecutorAssigned(address)': FunctionFragment
    'isExecutorMinStaked(address)': FunctionFragment
    'isModuleProvided(address,address)': FunctionFragment
    'isOwner()': FunctionFragment
    'isProviderLiquid(address,uint256,uint256)': FunctionFragment
    'isTaskProvided(address,tuple,tuple)': FunctionFragment
    'isTaskSpecProvided(address,tuple)': FunctionFragment
    'minExecProviderFunds(uint256,uint256)': FunctionFragment
    'minExecutorStake()': FunctionFragment
    'multiCancelTasks(tuple[])': FunctionFragment
    'multiProvide(address,tuple[],address[])': FunctionFragment
    'multiReassignProviders(address[],address)': FunctionFragment
    'multiUnprovide(uint256,tuple[],address[])': FunctionFragment
    'oracleRequestData()': FunctionFragment
    'owner()': FunctionFragment
    'provideFunds(address)': FunctionFragment
    'provideTaskSpecs(tuple[])': FunctionFragment
    'providerAssignsExecutor(address)': FunctionFragment
    'providerCanExec(address,tuple,tuple,uint256)': FunctionFragment
    'providerFunds(address)': FunctionFragment
    'providerModuleChecks(address,tuple,tuple)': FunctionFragment
    'providerModules(address)': FunctionFragment
    'removeProviderModules(address[])': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setExecutorSuccessShare(uint256)': FunctionFragment
    'setGelatoGasPriceOracle(address)': FunctionFragment
    'setGelatoMaxGas(uint256)': FunctionFragment
    'setInternalGasRequirement(uint256)': FunctionFragment
    'setMinExecutorStake(uint256)': FunctionFragment
    'setOracleRequestData(bytes)': FunctionFragment
    'setSysAdminSuccessShare(uint256)': FunctionFragment
    'setTaskSpecGasPriceCeil(bytes32,uint256)': FunctionFragment
    'stakeExecutor()': FunctionFragment
    'submitTask(tuple,tuple,uint256)': FunctionFragment
    'submitTaskChain(tuple,tuple[],uint256,uint256)': FunctionFragment
    'submitTaskCycle(tuple,tuple[],uint256,uint256)': FunctionFragment
    'sysAdminFunds()': FunctionFragment
    'sysAdminSuccessFee(uint256,uint256)': FunctionFragment
    'sysAdminSuccessShare()': FunctionFragment
    'taskReceiptHash(uint256)': FunctionFragment
    'taskSpecGasPriceCeil(address,bytes32)': FunctionFragment
    'totalSuccessShare()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unprovideFunds(uint256)': FunctionFragment
    'unprovideTaskSpecs(tuple[])': FunctionFragment
    'unstakeExecutor()': FunctionFragment
    'withdrawExcessExecutorStake(uint256)': FunctionFragment
    'withdrawSysAdminFunds(uint256,address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'EXEC_TX_OVERHEAD', values?: undefined): string
  encodeFunctionData(functionFragment: 'NO_CEIL', values?: undefined): string
  encodeFunctionData(functionFragment: 'addProviderModules', values: [string[]]): string
  encodeFunctionData(
    functionFragment: 'canExec',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'canSubmitTask',
    values: [
      string,
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'cancelTask',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'currentTaskReceiptId', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'exec',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'executionWrapper',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(functionFragment: 'executorAssignsExecutor', values: [string, string]): string
  encodeFunctionData(functionFragment: 'executorByProvider', values: [string]): string
  encodeFunctionData(functionFragment: 'executorProvidersCount', values: [string]): string
  encodeFunctionData(functionFragment: 'executorStake', values: [string]): string
  encodeFunctionData(functionFragment: 'executorSuccessFee', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'executorSuccessShare', values?: undefined): string
  encodeFunctionData(functionFragment: 'gelatoGasPriceOracle', values?: undefined): string
  encodeFunctionData(functionFragment: 'gelatoMaxGas', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'hashTaskReceipt',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'hashTaskSpec',
    values: [
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'internalGasRequirement', values?: undefined): string
  encodeFunctionData(functionFragment: 'isExecutorAssigned', values: [string]): string
  encodeFunctionData(functionFragment: 'isExecutorMinStaked', values: [string]): string
  encodeFunctionData(functionFragment: 'isModuleProvided', values: [string, string]): string
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string
  encodeFunctionData(functionFragment: 'isProviderLiquid', values: [string, BigNumberish, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'isTaskProvided',
    values: [
      string,
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'isTaskSpecProvided',
    values: [
      string,
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'minExecProviderFunds', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'minExecutorStake', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'multiCancelTasks',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'multiProvide',
    values: [
      string,
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      string[],
    ],
  ): string
  encodeFunctionData(functionFragment: 'multiReassignProviders', values: [string[], string]): string
  encodeFunctionData(
    functionFragment: 'multiUnprovide',
    values: [
      BigNumberish,
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      string[],
    ],
  ): string
  encodeFunctionData(functionFragment: 'oracleRequestData', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'provideFunds', values: [string]): string
  encodeFunctionData(
    functionFragment: 'provideTaskSpecs',
    values: [
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
    ],
  ): string
  encodeFunctionData(functionFragment: 'providerAssignsExecutor', values: [string]): string
  encodeFunctionData(
    functionFragment: 'providerCanExec',
    values: [
      string,
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(functionFragment: 'providerFunds', values: [string]): string
  encodeFunctionData(
    functionFragment: 'providerModuleChecks',
    values: [
      string,
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'providerModules', values: [string]): string
  encodeFunctionData(functionFragment: 'removeProviderModules', values: [string[]]): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'setExecutorSuccessShare', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setGelatoGasPriceOracle', values: [string]): string
  encodeFunctionData(functionFragment: 'setGelatoMaxGas', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setInternalGasRequirement', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setMinExecutorStake', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setOracleRequestData', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'setSysAdminSuccessShare', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setTaskSpecGasPriceCeil', values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'stakeExecutor', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'submitTask',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'submitTaskChain',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'submitTaskCycle',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(functionFragment: 'sysAdminFunds', values?: undefined): string
  encodeFunctionData(functionFragment: 'sysAdminSuccessFee', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'sysAdminSuccessShare', values?: undefined): string
  encodeFunctionData(functionFragment: 'taskReceiptHash', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'taskSpecGasPriceCeil', values: [string, BytesLike]): string
  encodeFunctionData(functionFragment: 'totalSuccessShare', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
  encodeFunctionData(functionFragment: 'unprovideFunds', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'unprovideTaskSpecs',
    values: [
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
    ],
  ): string
  encodeFunctionData(functionFragment: 'unstakeExecutor', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdrawExcessExecutorStake', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'withdrawSysAdminFunds', values: [BigNumberish, string]): string

  decodeFunctionResult(functionFragment: 'EXEC_TX_OVERHEAD', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'NO_CEIL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addProviderModules', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canExec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canSubmitTask', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'cancelTask', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'currentTaskReceiptId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executionWrapper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorAssignsExecutor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorByProvider', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorProvidersCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorSuccessFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorSuccessShare', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'gelatoGasPriceOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'gelatoMaxGas', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hashTaskReceipt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hashTaskSpec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'internalGasRequirement', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isExecutorAssigned', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isExecutorMinStaked', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isModuleProvided', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isProviderLiquid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isTaskProvided', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isTaskSpecProvided', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'minExecProviderFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'minExecutorStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiCancelTasks', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiProvide', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiReassignProviders', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiUnprovide', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'oracleRequestData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'provideFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'provideTaskSpecs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerAssignsExecutor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerCanExec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerModuleChecks', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerModules', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeProviderModules', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setExecutorSuccessShare', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setGelatoGasPriceOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setGelatoMaxGas', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setInternalGasRequirement', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMinExecutorStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOracleRequestData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setSysAdminSuccessShare', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setTaskSpecGasPriceCeil', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakeExecutor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTask', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTaskChain', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTaskCycle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sysAdminFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sysAdminSuccessFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sysAdminSuccessShare', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'taskReceiptHash', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'taskSpecGasPriceCeil', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSuccessShare', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unprovideFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unprovideTaskSpecs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unstakeExecutor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawExcessExecutorStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawSysAdminFunds', data: BytesLike): Result

  events: {
    'LogCanExecFailed(address,uint256,string)': EventFragment
    'LogExecReverted(address,uint256,uint256,string)': EventFragment
    'LogExecSuccess(address,uint256,uint256,uint256)': EventFragment
    'LogExecutorAssignedExecutor(address,address,address)': EventFragment
    'LogExecutorBalanceWithdrawn(address,uint256)': EventFragment
    'LogExecutorStaked(address,uint256,uint256)': EventFragment
    'LogExecutorSuccessShareSet(uint256,uint256,uint256)': EventFragment
    'LogExecutorUnstaked(address)': EventFragment
    'LogFundsProvided(address,uint256,uint256)': EventFragment
    'LogFundsUnprovided(address,uint256,uint256)': EventFragment
    'LogGelatoGasPriceOracleSet(address,address)': EventFragment
    'LogGelatoMaxGasSet(uint256,uint256)': EventFragment
    'LogInternalGasRequirementSet(uint256,uint256)': EventFragment
    'LogMinExecutorStakeSet(uint256,uint256)': EventFragment
    'LogOracleRequestDataSet(bytes,bytes)': EventFragment
    'LogProviderAssignedExecutor(address,address,address)': EventFragment
    'LogProviderModuleAdded(address,address)': EventFragment
    'LogProviderModuleRemoved(address,address)': EventFragment
    'LogSysAdminFundsWithdrawn(uint256,uint256)': EventFragment
    'LogSysAdminSuccessShareSet(uint256,uint256,uint256)': EventFragment
    'LogTaskCancelled(uint256,address)': EventFragment
    'LogTaskSpecGasPriceCeilSet(address,bytes32,uint256,uint256)': EventFragment
    'LogTaskSpecProvided(address,bytes32)': EventFragment
    'LogTaskSpecUnprovided(address,bytes32)': EventFragment
    'LogTaskSubmitted(uint256,bytes32,tuple)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogCanExecFailed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecReverted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecSuccess'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecutorAssignedExecutor'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecutorBalanceWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecutorStaked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecutorSuccessShareSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecutorUnstaked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogFundsProvided'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogFundsUnprovided'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogGelatoGasPriceOracleSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogGelatoMaxGasSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogInternalGasRequirementSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogMinExecutorStakeSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogOracleRequestDataSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogProviderAssignedExecutor'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogProviderModuleAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogProviderModuleRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSysAdminFundsWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogSysAdminSuccessShareSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskCancelled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskSpecGasPriceCeilSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskSpecProvided'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskSpecUnprovided'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskSubmitted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export class GelatoCore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: GelatoCoreInterface

  functions: {
    EXEC_TX_OVERHEAD(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'EXEC_TX_OVERHEAD()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    NO_CEIL(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'NO_CEIL()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    addProviderModules(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

    'addProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

    canExec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'canExec(tuple,uint256,uint256)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'canSubmitTask(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    cancelTask(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'cancelTask(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    currentTaskReceiptId(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'currentTaskReceiptId()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    exec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'exec(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    executionWrapper(
      taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'executionWrapper(tuple,uint256,uint256)'(
      taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    executorAssignsExecutor(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'executorAssignsExecutor(address,address)'(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    executorByProvider(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'executorByProvider(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    executorProvidersCount(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'executorProvidersCount(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    executorStake(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'executorStake(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    executorSuccessFee(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'executorSuccessFee(uint256,uint256)'(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    executorSuccessShare(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'executorSuccessShare()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    gelatoGasPriceOracle(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'gelatoGasPriceOracle()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    gelatoMaxGas(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'gelatoMaxGas()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    hashTaskReceipt(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'hashTaskReceipt(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    hashTaskSpec(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'hashTaskSpec(tuple)'(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    internalGasRequirement(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'internalGasRequirement()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    isExecutorAssigned(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isExecutorAssigned(address)'(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isExecutorMinStaked(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isExecutorMinStaked(address)'(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isModuleProvided(
      _provider: string,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isModuleProvided(address,address)'(
      _provider: string,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isOwner(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isOwner()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isProviderLiquid(address,uint256,uint256)'(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      res: string
      0: string
    }>

    'isTaskProvided(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      res: string
      0: string
    }>

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'isTaskSpecProvided(address,tuple)'(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'minExecProviderFunds(uint256,uint256)'(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    minExecutorStake(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'minExecutorStake()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'multiProvide(address,tuple[],address[])'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    multiReassignProviders(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'multiReassignProviders(address[],address)'(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'multiUnprovide(uint256,tuple[],address[])'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    oracleRequestData(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'oracleRequestData()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    owner(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'owner()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    provideFunds(_provider: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    'provideFunds(address)'(_provider: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'provideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    providerAssignsExecutor(_newExecutor: string, overrides?: Overrides): Promise<ContractTransaction>

    'providerAssignsExecutor(address)'(_newExecutor: string, overrides?: Overrides): Promise<ContractTransaction>

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'providerCanExec(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    providerFunds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'providerFunds(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'providerModuleChecks(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    providerModules(
      _provider: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string[]
    }>

    'providerModules(address)'(
      _provider: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string[]
    }>

    removeProviderModules(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

    'removeProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setExecutorSuccessShare(_percentage: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'setExecutorSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    setGelatoGasPriceOracle(_newOracle: string, overrides?: Overrides): Promise<ContractTransaction>

    'setGelatoGasPriceOracle(address)'(_newOracle: string, overrides?: Overrides): Promise<ContractTransaction>

    setGelatoMaxGas(_newMaxGas: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'setGelatoMaxGas(uint256)'(_newMaxGas: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    setInternalGasRequirement(_newRequirement: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'setInternalGasRequirement(uint256)'(
      _newRequirement: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    setMinExecutorStake(_newMin: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'setMinExecutorStake(uint256)'(_newMin: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    setOracleRequestData(_requestData: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

    'setOracleRequestData(bytes)'(_requestData: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

    setSysAdminSuccessShare(_percentage: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'setSysAdminSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    setTaskSpecGasPriceCeil(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'setTaskSpecGasPriceCeil(bytes32,uint256)'(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    stakeExecutor(overrides?: PayableOverrides): Promise<ContractTransaction>

    'stakeExecutor()'(overrides?: PayableOverrides): Promise<ContractTransaction>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    sysAdminFunds(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'sysAdminFunds()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    sysAdminSuccessFee(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'sysAdminSuccessFee(uint256,uint256)'(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    sysAdminSuccessShare(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'sysAdminSuccessShare()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    taskReceiptHash(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'taskReceiptHash(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    taskSpecGasPriceCeil(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'taskSpecGasPriceCeil(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    totalSuccessShare(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'totalSuccessShare()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

    unprovideFunds(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'unprovideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    unstakeExecutor(overrides?: Overrides): Promise<ContractTransaction>

    'unstakeExecutor()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'withdrawExcessExecutorStake(uint256)'(
      _withdrawAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    withdrawSysAdminFunds(_amount: BigNumberish, _to: string, overrides?: Overrides): Promise<ContractTransaction>

    'withdrawSysAdminFunds(uint256,address)'(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>
  }

  EXEC_TX_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>

  'EXEC_TX_OVERHEAD()'(overrides?: CallOverrides): Promise<BigNumber>

  NO_CEIL(overrides?: CallOverrides): Promise<BigNumber>

  'NO_CEIL()'(overrides?: CallOverrides): Promise<BigNumber>

  addProviderModules(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

  'addProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

  canExec(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    _gasLimit: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  'canExec(tuple,uint256,uint256)'(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    _gasLimit: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  canSubmitTask(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  'canSubmitTask(address,tuple,tuple,uint256)'(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  cancelTask(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'cancelTask(tuple)'(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  currentTaskReceiptId(overrides?: CallOverrides): Promise<BigNumber>

  'currentTaskReceiptId()'(overrides?: CallOverrides): Promise<BigNumber>

  exec(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'exec(tuple)'(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  executionWrapper(
    taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    _gasLimit: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'executionWrapper(tuple,uint256,uint256)'(
    taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    _gasLimit: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  executorAssignsExecutor(_provider: string, _newExecutor: string, overrides?: Overrides): Promise<ContractTransaction>

  'executorAssignsExecutor(address,address)'(
    _provider: string,
    _newExecutor: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  executorByProvider(arg0: string, overrides?: CallOverrides): Promise<string>

  'executorByProvider(address)'(arg0: string, overrides?: CallOverrides): Promise<string>

  executorProvidersCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'executorProvidersCount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  executorStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'executorStake(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  executorSuccessFee(_gas: BigNumberish, _gasPrice: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'executorSuccessFee(uint256,uint256)'(
    _gas: BigNumberish,
    _gasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  executorSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

  'executorSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

  gelatoGasPriceOracle(overrides?: CallOverrides): Promise<string>

  'gelatoGasPriceOracle()'(overrides?: CallOverrides): Promise<string>

  gelatoMaxGas(overrides?: CallOverrides): Promise<BigNumber>

  'gelatoMaxGas()'(overrides?: CallOverrides): Promise<BigNumber>

  hashTaskReceipt(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'hashTaskReceipt(tuple)'(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  hashTaskSpec(
    _taskSpec: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'hashTaskSpec(tuple)'(
    _taskSpec: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  internalGasRequirement(overrides?: CallOverrides): Promise<BigNumber>

  'internalGasRequirement()'(overrides?: CallOverrides): Promise<BigNumber>

  isExecutorAssigned(_executor: string, overrides?: CallOverrides): Promise<boolean>

  'isExecutorAssigned(address)'(_executor: string, overrides?: CallOverrides): Promise<boolean>

  isExecutorMinStaked(_executor: string, overrides?: CallOverrides): Promise<boolean>

  'isExecutorMinStaked(address)'(_executor: string, overrides?: CallOverrides): Promise<boolean>

  isModuleProvided(_provider: string, _module: string, overrides?: CallOverrides): Promise<boolean>

  'isModuleProvided(address,address)'(_provider: string, _module: string, overrides?: CallOverrides): Promise<boolean>

  isOwner(overrides?: CallOverrides): Promise<boolean>

  'isOwner()'(overrides?: CallOverrides): Promise<boolean>

  isProviderLiquid(
    _provider: string,
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>

  'isProviderLiquid(address,uint256,uint256)'(
    _provider: string,
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>

  isTaskProvided(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'isTaskProvided(address,tuple,tuple)'(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  isTaskSpecProvided(
    _provider: string,
    _taskSpec: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'isTaskSpecProvided(address,tuple)'(
    _provider: string,
    _taskSpec: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  minExecProviderFunds(
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  'minExecProviderFunds(uint256,uint256)'(
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  minExecutorStake(overrides?: CallOverrides): Promise<BigNumber>

  'minExecutorStake()'(overrides?: CallOverrides): Promise<BigNumber>

  multiCancelTasks(
    _taskReceipts: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'multiCancelTasks(tuple[])'(
    _taskReceipts: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  multiProvide(
    _executor: string,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'multiProvide(address,tuple[],address[])'(
    _executor: string,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  multiReassignProviders(
    _providers: string[],
    _newExecutor: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'multiReassignProviders(address[],address)'(
    _providers: string[],
    _newExecutor: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  multiUnprovide(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'multiUnprovide(uint256,tuple[],address[])'(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  oracleRequestData(overrides?: CallOverrides): Promise<string>

  'oracleRequestData()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  provideFunds(_provider: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  'provideFunds(address)'(_provider: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  provideTaskSpecs(
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'provideTaskSpecs(tuple[])'(
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  providerAssignsExecutor(_newExecutor: string, overrides?: Overrides): Promise<ContractTransaction>

  'providerAssignsExecutor(address)'(_newExecutor: string, overrides?: Overrides): Promise<ContractTransaction>

  providerCanExec(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  'providerCanExec(address,tuple,tuple,uint256)'(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  providerFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'providerFunds(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  providerModuleChecks(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'providerModuleChecks(address,tuple,tuple)'(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  providerModules(_provider: string, overrides?: CallOverrides): Promise<string[]>

  'providerModules(address)'(_provider: string, overrides?: CallOverrides): Promise<string[]>

  removeProviderModules(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

  'removeProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setExecutorSuccessShare(_percentage: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'setExecutorSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  setGelatoGasPriceOracle(_newOracle: string, overrides?: Overrides): Promise<ContractTransaction>

  'setGelatoGasPriceOracle(address)'(_newOracle: string, overrides?: Overrides): Promise<ContractTransaction>

  setGelatoMaxGas(_newMaxGas: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'setGelatoMaxGas(uint256)'(_newMaxGas: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  setInternalGasRequirement(_newRequirement: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'setInternalGasRequirement(uint256)'(
    _newRequirement: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  setMinExecutorStake(_newMin: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'setMinExecutorStake(uint256)'(_newMin: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  setOracleRequestData(_requestData: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

  'setOracleRequestData(bytes)'(_requestData: BytesLike, overrides?: Overrides): Promise<ContractTransaction>

  setSysAdminSuccessShare(_percentage: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'setSysAdminSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  setTaskSpecGasPriceCeil(
    _taskSpecHash: BytesLike,
    _gasPriceCeil: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'setTaskSpecGasPriceCeil(bytes32,uint256)'(
    _taskSpecHash: BytesLike,
    _gasPriceCeil: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  stakeExecutor(overrides?: PayableOverrides): Promise<ContractTransaction>

  'stakeExecutor()'(overrides?: PayableOverrides): Promise<ContractTransaction>

  submitTask(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'submitTask(tuple,tuple,uint256)'(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  submitTaskChain(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'submitTaskChain(tuple,tuple[],uint256,uint256)'(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  submitTaskCycle(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  sysAdminFunds(overrides?: CallOverrides): Promise<BigNumber>

  'sysAdminFunds()'(overrides?: CallOverrides): Promise<BigNumber>

  sysAdminSuccessFee(_gas: BigNumberish, _gasPrice: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'sysAdminSuccessFee(uint256,uint256)'(
    _gas: BigNumberish,
    _gasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  sysAdminSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

  'sysAdminSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

  taskReceiptHash(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'taskReceiptHash(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  taskSpecGasPriceCeil(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  'taskSpecGasPriceCeil(address,bytes32)'(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  totalSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

  'totalSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

  unprovideFunds(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  unprovideTaskSpecs(
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'unprovideTaskSpecs(tuple[])'(
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  unstakeExecutor(overrides?: Overrides): Promise<ContractTransaction>

  'unstakeExecutor()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'withdrawExcessExecutorStake(uint256)'(
    _withdrawAmount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  withdrawSysAdminFunds(_amount: BigNumberish, _to: string, overrides?: Overrides): Promise<ContractTransaction>

  'withdrawSysAdminFunds(uint256,address)'(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  callStatic: {
    EXEC_TX_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>

    'EXEC_TX_OVERHEAD()'(overrides?: CallOverrides): Promise<BigNumber>

    NO_CEIL(overrides?: CallOverrides): Promise<BigNumber>

    'NO_CEIL()'(overrides?: CallOverrides): Promise<BigNumber>

    addProviderModules(_modules: string[], overrides?: CallOverrides): Promise<void>

    'addProviderModules(address[])'(_modules: string[], overrides?: CallOverrides): Promise<void>

    canExec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    'canExec(tuple,uint256,uint256)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    'canSubmitTask(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    cancelTask(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'cancelTask(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    currentTaskReceiptId(overrides?: CallOverrides): Promise<BigNumber>

    'currentTaskReceiptId()'(overrides?: CallOverrides): Promise<BigNumber>

    exec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'exec(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    executionWrapper(
      taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: number
      1: string
    }>

    'executionWrapper(tuple,uint256,uint256)'(
      taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: number
      1: string
    }>

    executorAssignsExecutor(_provider: string, _newExecutor: string, overrides?: CallOverrides): Promise<void>

    'executorAssignsExecutor(address,address)'(
      _provider: string,
      _newExecutor: string,
      overrides?: CallOverrides,
    ): Promise<void>

    executorByProvider(arg0: string, overrides?: CallOverrides): Promise<string>

    'executorByProvider(address)'(arg0: string, overrides?: CallOverrides): Promise<string>

    executorProvidersCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorProvidersCount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    executorStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorStake(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    executorSuccessFee(_gas: BigNumberish, _gasPrice: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'executorSuccessFee(uint256,uint256)'(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    executorSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

    'executorSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

    gelatoGasPriceOracle(overrides?: CallOverrides): Promise<string>

    'gelatoGasPriceOracle()'(overrides?: CallOverrides): Promise<string>

    gelatoMaxGas(overrides?: CallOverrides): Promise<BigNumber>

    'gelatoMaxGas()'(overrides?: CallOverrides): Promise<BigNumber>

    hashTaskReceipt(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'hashTaskReceipt(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    hashTaskSpec(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'hashTaskSpec(tuple)'(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    internalGasRequirement(overrides?: CallOverrides): Promise<BigNumber>

    'internalGasRequirement()'(overrides?: CallOverrides): Promise<BigNumber>

    isExecutorAssigned(_executor: string, overrides?: CallOverrides): Promise<boolean>

    'isExecutorAssigned(address)'(_executor: string, overrides?: CallOverrides): Promise<boolean>

    isExecutorMinStaked(_executor: string, overrides?: CallOverrides): Promise<boolean>

    'isExecutorMinStaked(address)'(_executor: string, overrides?: CallOverrides): Promise<boolean>

    isModuleProvided(_provider: string, _module: string, overrides?: CallOverrides): Promise<boolean>

    'isModuleProvided(address,address)'(_provider: string, _module: string, overrides?: CallOverrides): Promise<boolean>

    isOwner(overrides?: CallOverrides): Promise<boolean>

    'isOwner()'(overrides?: CallOverrides): Promise<boolean>

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'isProviderLiquid(address,uint256,uint256)'(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'isTaskProvided(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'isTaskSpecProvided(address,tuple)'(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'minExecProviderFunds(uint256,uint256)'(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    minExecutorStake(overrides?: CallOverrides): Promise<BigNumber>

    'minExecutorStake()'(overrides?: CallOverrides): Promise<BigNumber>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    'multiProvide(address,tuple[],address[])'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    multiReassignProviders(_providers: string[], _newExecutor: string, overrides?: CallOverrides): Promise<void>

    'multiReassignProviders(address[],address)'(
      _providers: string[],
      _newExecutor: string,
      overrides?: CallOverrides,
    ): Promise<void>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    'multiUnprovide(uint256,tuple[],address[])'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    oracleRequestData(overrides?: CallOverrides): Promise<string>

    'oracleRequestData()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    provideFunds(_provider: string, overrides?: CallOverrides): Promise<void>

    'provideFunds(address)'(_provider: string, overrides?: CallOverrides): Promise<void>

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    'provideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    providerAssignsExecutor(_newExecutor: string, overrides?: CallOverrides): Promise<void>

    'providerAssignsExecutor(address)'(_newExecutor: string, overrides?: CallOverrides): Promise<void>

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    'providerCanExec(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    providerFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'providerFunds(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'providerModuleChecks(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    providerModules(_provider: string, overrides?: CallOverrides): Promise<string[]>

    'providerModules(address)'(_provider: string, overrides?: CallOverrides): Promise<string[]>

    removeProviderModules(_modules: string[], overrides?: CallOverrides): Promise<void>

    'removeProviderModules(address[])'(_modules: string[], overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setExecutorSuccessShare(_percentage: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setExecutorSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: CallOverrides): Promise<void>

    setGelatoGasPriceOracle(_newOracle: string, overrides?: CallOverrides): Promise<void>

    'setGelatoGasPriceOracle(address)'(_newOracle: string, overrides?: CallOverrides): Promise<void>

    setGelatoMaxGas(_newMaxGas: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setGelatoMaxGas(uint256)'(_newMaxGas: BigNumberish, overrides?: CallOverrides): Promise<void>

    setInternalGasRequirement(_newRequirement: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setInternalGasRequirement(uint256)'(_newRequirement: BigNumberish, overrides?: CallOverrides): Promise<void>

    setMinExecutorStake(_newMin: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setMinExecutorStake(uint256)'(_newMin: BigNumberish, overrides?: CallOverrides): Promise<void>

    setOracleRequestData(_requestData: BytesLike, overrides?: CallOverrides): Promise<void>

    'setOracleRequestData(bytes)'(_requestData: BytesLike, overrides?: CallOverrides): Promise<void>

    setSysAdminSuccessShare(_percentage: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setSysAdminSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: CallOverrides): Promise<void>

    setTaskSpecGasPriceCeil(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'setTaskSpecGasPriceCeil(bytes32,uint256)'(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    stakeExecutor(overrides?: CallOverrides): Promise<void>

    'stakeExecutor()'(overrides?: CallOverrides): Promise<void>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    sysAdminFunds(overrides?: CallOverrides): Promise<BigNumber>

    'sysAdminFunds()'(overrides?: CallOverrides): Promise<BigNumber>

    sysAdminSuccessFee(_gas: BigNumberish, _gasPrice: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'sysAdminSuccessFee(uint256,uint256)'(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    sysAdminSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

    'sysAdminSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

    taskReceiptHash(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'taskReceiptHash(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    taskSpecGasPriceCeil(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'taskSpecGasPriceCeil(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    totalSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

    'totalSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>

    unprovideFunds(_withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    'unprovideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    unstakeExecutor(overrides?: CallOverrides): Promise<void>

    'unstakeExecutor()'(overrides?: CallOverrides): Promise<void>

    withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'withdrawExcessExecutorStake(uint256)'(_withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    withdrawSysAdminFunds(_amount: BigNumberish, _to: string, overrides?: CallOverrides): Promise<BigNumber>

    'withdrawSysAdminFunds(uint256,address)'(
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  filters: {
    LogCanExecFailed(executor: string | null, taskReceiptId: BigNumberish | null, reason: null): EventFilter

    LogExecReverted(
      executor: string | null,
      taskReceiptId: BigNumberish | null,
      executorRefund: null,
      reason: null,
    ): EventFilter

    LogExecSuccess(
      executor: string | null,
      taskReceiptId: BigNumberish | null,
      executorSuccessFee: null,
      sysAdminSuccessFee: null,
    ): EventFilter

    LogExecutorAssignedExecutor(
      provider: string | null,
      oldExecutor: string | null,
      newExecutor: string | null,
    ): EventFilter

    LogExecutorBalanceWithdrawn(executor: string | null, withdrawAmount: null): EventFilter

    LogExecutorStaked(executor: string | null, oldStake: null, newStake: null): EventFilter

    LogExecutorSuccessShareSet(oldShare: null, newShare: null, total: null): EventFilter

    LogExecutorUnstaked(executor: string | null): EventFilter

    LogFundsProvided(provider: string | null, amount: null, newProviderFunds: null): EventFilter

    LogFundsUnprovided(provider: string | null, realWithdrawAmount: null, newProviderFunds: null): EventFilter

    LogGelatoGasPriceOracleSet(oldOracle: string | null, newOracle: string | null): EventFilter

    LogGelatoMaxGasSet(oldMaxGas: null, newMaxGas: null): EventFilter

    LogInternalGasRequirementSet(oldRequirment: null, newRequirment: null): EventFilter

    LogMinExecutorStakeSet(oldMin: null, newMin: null): EventFilter

    LogOracleRequestDataSet(oldData: null, newData: null): EventFilter

    LogProviderAssignedExecutor(
      provider: string | null,
      oldExecutor: string | null,
      newExecutor: string | null,
    ): EventFilter

    LogProviderModuleAdded(provider: string | null, module: string | null): EventFilter

    LogProviderModuleRemoved(provider: string | null, module: string | null): EventFilter

    LogSysAdminFundsWithdrawn(oldBalance: null, newBalance: null): EventFilter

    LogSysAdminSuccessShareSet(oldShare: null, newShare: null, total: null): EventFilter

    LogTaskCancelled(taskReceiptId: BigNumberish | null, cancellor: string | null): EventFilter

    LogTaskSpecGasPriceCeilSet(
      provider: string | null,
      taskSpecHash: null,
      oldTaskSpecGasPriceCeil: null,
      newTaskSpecGasPriceCeil: null,
    ): EventFilter

    LogTaskSpecProvided(provider: string | null, taskSpecHash: BytesLike | null): EventFilter

    LogTaskSpecUnprovided(provider: string | null, taskSpecHash: BytesLike | null): EventFilter

    LogTaskSubmitted(
      taskReceiptId: BigNumberish | null,
      taskReceiptHash: BytesLike | null,
      taskReceipt: null,
    ): EventFilter

    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter
  }

  estimateGas: {
    EXEC_TX_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>

    'EXEC_TX_OVERHEAD()'(overrides?: CallOverrides): Promise<BigNumber>

    NO_CEIL(overrides?: CallOverrides): Promise<BigNumber>

    'NO_CEIL()'(overrides?: CallOverrides): Promise<BigNumber>

    addProviderModules(_modules: string[], overrides?: Overrides): Promise<BigNumber>

    'addProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<BigNumber>

    canExec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'canExec(tuple,uint256,uint256)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'canSubmitTask(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    cancelTask(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'cancelTask(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    currentTaskReceiptId(overrides?: CallOverrides): Promise<BigNumber>

    'currentTaskReceiptId()'(overrides?: CallOverrides): Promise<BigNumber>

    exec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'exec(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    executionWrapper(
      taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'executionWrapper(tuple,uint256,uint256)'(
      taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    executorAssignsExecutor(_provider: string, _newExecutor: string, overrides?: Overrides): Promise<BigNumber>

    'executorAssignsExecutor(address,address)'(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    executorByProvider(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorByProvider(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    executorProvidersCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorProvidersCount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    executorStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorStake(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    executorSuccessFee(_gas: BigNumberish, _gasPrice: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'executorSuccessFee(uint256,uint256)'(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    executorSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

    'executorSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

    gelatoGasPriceOracle(overrides?: CallOverrides): Promise<BigNumber>

    'gelatoGasPriceOracle()'(overrides?: CallOverrides): Promise<BigNumber>

    gelatoMaxGas(overrides?: CallOverrides): Promise<BigNumber>

    'gelatoMaxGas()'(overrides?: CallOverrides): Promise<BigNumber>

    hashTaskReceipt(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'hashTaskReceipt(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    hashTaskSpec(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'hashTaskSpec(tuple)'(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    internalGasRequirement(overrides?: CallOverrides): Promise<BigNumber>

    'internalGasRequirement()'(overrides?: CallOverrides): Promise<BigNumber>

    isExecutorAssigned(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    'isExecutorAssigned(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    isExecutorMinStaked(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    'isExecutorMinStaked(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    isModuleProvided(_provider: string, _module: string, overrides?: CallOverrides): Promise<BigNumber>

    'isModuleProvided(address,address)'(
      _provider: string,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isOwner(overrides?: CallOverrides): Promise<BigNumber>

    'isOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'isProviderLiquid(address,uint256,uint256)'(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'isTaskProvided(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'isTaskSpecProvided(address,tuple)'(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'minExecProviderFunds(uint256,uint256)'(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    minExecutorStake(overrides?: CallOverrides): Promise<BigNumber>

    'minExecutorStake()'(overrides?: CallOverrides): Promise<BigNumber>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'multiProvide(address,tuple[],address[])'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    multiReassignProviders(_providers: string[], _newExecutor: string, overrides?: Overrides): Promise<BigNumber>

    'multiReassignProviders(address[],address)'(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'multiUnprovide(uint256,tuple[],address[])'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    oracleRequestData(overrides?: CallOverrides): Promise<BigNumber>

    'oracleRequestData()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    provideFunds(_provider: string, overrides?: PayableOverrides): Promise<BigNumber>

    'provideFunds(address)'(_provider: string, overrides?: PayableOverrides): Promise<BigNumber>

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'provideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    providerAssignsExecutor(_newExecutor: string, overrides?: Overrides): Promise<BigNumber>

    'providerAssignsExecutor(address)'(_newExecutor: string, overrides?: Overrides): Promise<BigNumber>

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'providerCanExec(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    providerFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'providerFunds(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'providerModuleChecks(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    providerModules(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    'providerModules(address)'(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    removeProviderModules(_modules: string[], overrides?: Overrides): Promise<BigNumber>

    'removeProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setExecutorSuccessShare(_percentage: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'setExecutorSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    setGelatoGasPriceOracle(_newOracle: string, overrides?: Overrides): Promise<BigNumber>

    'setGelatoGasPriceOracle(address)'(_newOracle: string, overrides?: Overrides): Promise<BigNumber>

    setGelatoMaxGas(_newMaxGas: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'setGelatoMaxGas(uint256)'(_newMaxGas: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    setInternalGasRequirement(_newRequirement: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'setInternalGasRequirement(uint256)'(_newRequirement: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    setMinExecutorStake(_newMin: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'setMinExecutorStake(uint256)'(_newMin: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    setOracleRequestData(_requestData: BytesLike, overrides?: Overrides): Promise<BigNumber>

    'setOracleRequestData(bytes)'(_requestData: BytesLike, overrides?: Overrides): Promise<BigNumber>

    setSysAdminSuccessShare(_percentage: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'setSysAdminSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    setTaskSpecGasPriceCeil(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'setTaskSpecGasPriceCeil(bytes32,uint256)'(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    stakeExecutor(overrides?: PayableOverrides): Promise<BigNumber>

    'stakeExecutor()'(overrides?: PayableOverrides): Promise<BigNumber>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    sysAdminFunds(overrides?: CallOverrides): Promise<BigNumber>

    'sysAdminFunds()'(overrides?: CallOverrides): Promise<BigNumber>

    sysAdminSuccessFee(_gas: BigNumberish, _gasPrice: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'sysAdminSuccessFee(uint256,uint256)'(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    sysAdminSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

    'sysAdminSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

    taskReceiptHash(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'taskReceiptHash(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    taskSpecGasPriceCeil(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'taskSpecGasPriceCeil(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    totalSuccessShare(overrides?: CallOverrides): Promise<BigNumber>

    'totalSuccessShare()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>

    unprovideFunds(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'unprovideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    unstakeExecutor(overrides?: Overrides): Promise<BigNumber>

    'unstakeExecutor()'(overrides?: Overrides): Promise<BigNumber>

    withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'withdrawExcessExecutorStake(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    withdrawSysAdminFunds(_amount: BigNumberish, _to: string, overrides?: Overrides): Promise<BigNumber>

    'withdrawSysAdminFunds(uint256,address)'(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    EXEC_TX_OVERHEAD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'EXEC_TX_OVERHEAD()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    NO_CEIL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'NO_CEIL()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addProviderModules(_modules: string[], overrides?: Overrides): Promise<PopulatedTransaction>

    'addProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<PopulatedTransaction>

    canExec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'canExec(tuple,uint256,uint256)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'canSubmitTask(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    cancelTask(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'cancelTask(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    currentTaskReceiptId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'currentTaskReceiptId()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    exec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'exec(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    executionWrapper(
      taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'executionWrapper(tuple,uint256,uint256)'(
      taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    executorAssignsExecutor(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'executorAssignsExecutor(address,address)'(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    executorByProvider(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'executorByProvider(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    executorProvidersCount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'executorProvidersCount(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    executorStake(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'executorStake(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    executorSuccessFee(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'executorSuccessFee(uint256,uint256)'(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    executorSuccessShare(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'executorSuccessShare()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    gelatoGasPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'gelatoGasPriceOracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    gelatoMaxGas(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'gelatoMaxGas()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    hashTaskReceipt(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'hashTaskReceipt(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    hashTaskSpec(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'hashTaskSpec(tuple)'(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    internalGasRequirement(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'internalGasRequirement()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isExecutorAssigned(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isExecutorAssigned(address)'(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isExecutorMinStaked(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isExecutorMinStaked(address)'(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isModuleProvided(_provider: string, _module: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isModuleProvided(address,address)'(
      _provider: string,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'isProviderLiquid(address,uint256,uint256)'(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'isTaskProvided(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'isTaskSpecProvided(address,tuple)'(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'minExecProviderFunds(uint256,uint256)'(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    minExecutorStake(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'minExecutorStake()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'multiProvide(address,tuple[],address[])'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    multiReassignProviders(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'multiReassignProviders(address[],address)'(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'multiUnprovide(uint256,tuple[],address[])'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    oracleRequestData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'oracleRequestData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    provideFunds(_provider: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'provideFunds(address)'(_provider: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'provideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    providerAssignsExecutor(_newExecutor: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'providerAssignsExecutor(address)'(_newExecutor: string, overrides?: Overrides): Promise<PopulatedTransaction>

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'providerCanExec(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    providerFunds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'providerFunds(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'providerModuleChecks(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    providerModules(_provider: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'providerModules(address)'(_provider: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeProviderModules(_modules: string[], overrides?: Overrides): Promise<PopulatedTransaction>

    'removeProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setExecutorSuccessShare(_percentage: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'setExecutorSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    setGelatoGasPriceOracle(_newOracle: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'setGelatoGasPriceOracle(address)'(_newOracle: string, overrides?: Overrides): Promise<PopulatedTransaction>

    setGelatoMaxGas(_newMaxGas: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'setGelatoMaxGas(uint256)'(_newMaxGas: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    setInternalGasRequirement(_newRequirement: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'setInternalGasRequirement(uint256)'(
      _newRequirement: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    setMinExecutorStake(_newMin: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'setMinExecutorStake(uint256)'(_newMin: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    setOracleRequestData(_requestData: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>

    'setOracleRequestData(bytes)'(_requestData: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>

    setSysAdminSuccessShare(_percentage: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'setSysAdminSuccessShare(uint256)'(_percentage: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    setTaskSpecGasPriceCeil(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'setTaskSpecGasPriceCeil(bytes32,uint256)'(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    stakeExecutor(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'stakeExecutor()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    sysAdminFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sysAdminFunds()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sysAdminSuccessFee(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'sysAdminSuccessFee(uint256,uint256)'(
      _gas: BigNumberish,
      _gasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    sysAdminSuccessShare(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sysAdminSuccessShare()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    taskReceiptHash(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'taskReceiptHash(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    taskSpecGasPriceCeil(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'taskSpecGasPriceCeil(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    totalSuccessShare(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSuccessShare()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>

    unprovideFunds(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'unprovideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    unstakeExecutor(overrides?: Overrides): Promise<PopulatedTransaction>

    'unstakeExecutor()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawExcessExecutorStake(uint256)'(
      _withdrawAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    withdrawSysAdminFunds(_amount: BigNumberish, _to: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawSysAdminFunds(uint256,address)'(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>
  }
}
