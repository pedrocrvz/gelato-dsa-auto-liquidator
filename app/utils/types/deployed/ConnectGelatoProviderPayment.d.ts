/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ConnectGelatoProviderPaymentInterface extends ethers.utils.Interface {
  functions: {
    'GELATO_CORE()': FunctionFragment
    'connectorID()': FunctionFragment
    'gelatoProvider()': FunctionFragment
    'isOwner()': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'payProvider(address,uint256,uint256,uint256)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setProvider(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'GELATO_CORE', values?: undefined): string
  encodeFunctionData(functionFragment: 'connectorID', values?: undefined): string
  encodeFunctionData(functionFragment: 'gelatoProvider', values?: undefined): string
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'payProvider',
    values: [string, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'setProvider', values: [string]): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string

  decodeFunctionResult(functionFragment: 'GELATO_CORE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'connectorID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'gelatoProvider', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payProvider', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setProvider', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export class ConnectGelatoProviderPayment extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ConnectGelatoProviderPaymentInterface

  functions: {
    GELATO_CORE(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'GELATO_CORE()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    gelatoProvider(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'gelatoProvider()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    isOwner(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isOwner()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    name(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'name()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    owner(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'owner()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    payProvider(
      _token: string,
      _amt: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'payProvider(address,uint256,uint256,uint256)'(
      _token: string,
      _amt: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setProvider(_gelatoProvider: string, overrides?: Overrides): Promise<ContractTransaction>

    'setProvider(address)'(_gelatoProvider: string, overrides?: Overrides): Promise<ContractTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>
  }

  GELATO_CORE(overrides?: CallOverrides): Promise<string>

  'GELATO_CORE()'(overrides?: CallOverrides): Promise<string>

  connectorID(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'connectorID()'(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  gelatoProvider(overrides?: CallOverrides): Promise<string>

  'gelatoProvider()'(overrides?: CallOverrides): Promise<string>

  isOwner(overrides?: CallOverrides): Promise<boolean>

  'isOwner()'(overrides?: CallOverrides): Promise<boolean>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  payProvider(
    _token: string,
    _amt: BigNumberish,
    _getId: BigNumberish,
    _setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'payProvider(address,uint256,uint256,uint256)'(
    _token: string,
    _amt: BigNumberish,
    _getId: BigNumberish,
    _setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setProvider(_gelatoProvider: string, overrides?: Overrides): Promise<ContractTransaction>

  'setProvider(address)'(_gelatoProvider: string, overrides?: Overrides): Promise<ContractTransaction>

  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

  callStatic: {
    GELATO_CORE(overrides?: CallOverrides): Promise<string>

    'GELATO_CORE()'(overrides?: CallOverrides): Promise<string>

    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    gelatoProvider(overrides?: CallOverrides): Promise<string>

    'gelatoProvider()'(overrides?: CallOverrides): Promise<string>

    isOwner(overrides?: CallOverrides): Promise<boolean>

    'isOwner()'(overrides?: CallOverrides): Promise<boolean>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    payProvider(
      _token: string,
      _amt: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'payProvider(address,uint256,uint256,uint256)'(
      _token: string,
      _amt: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setProvider(_gelatoProvider: string, overrides?: CallOverrides): Promise<void>

    'setProvider(address)'(_gelatoProvider: string, overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter
  }

  estimateGas: {
    GELATO_CORE(overrides?: CallOverrides): Promise<BigNumber>

    'GELATO_CORE()'(overrides?: CallOverrides): Promise<BigNumber>

    connectorID(overrides?: CallOverrides): Promise<BigNumber>

    'connectorID()'(overrides?: CallOverrides): Promise<BigNumber>

    gelatoProvider(overrides?: CallOverrides): Promise<BigNumber>

    'gelatoProvider()'(overrides?: CallOverrides): Promise<BigNumber>

    isOwner(overrides?: CallOverrides): Promise<BigNumber>

    'isOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    payProvider(
      _token: string,
      _amt: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'payProvider(address,uint256,uint256,uint256)'(
      _token: string,
      _amt: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setProvider(_gelatoProvider: string, overrides?: Overrides): Promise<BigNumber>

    'setProvider(address)'(_gelatoProvider: string, overrides?: Overrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    GELATO_CORE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'GELATO_CORE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'connectorID()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    gelatoProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'gelatoProvider()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    payProvider(
      _token: string,
      _amt: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'payProvider(address,uint256,uint256,uint256)'(
      _token: string,
      _amt: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setProvider(_gelatoProvider: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'setProvider(address)'(_gelatoProvider: string, overrides?: Overrides): Promise<PopulatedTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>
  }
}
