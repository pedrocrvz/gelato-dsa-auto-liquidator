/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface DssCdpManagerInterface extends ethers.utils.Interface {
  functions: {
    'cdpCan(address,uint256,address)': FunctionFragment
    'count(address)': FunctionFragment
    'flux(uint256,address,uint256)': FunctionFragment
    'frob(uint256,int256,int256)': FunctionFragment
    'give(uint256,address)': FunctionFragment
    'ilks(uint256)': FunctionFragment
    'last(address)': FunctionFragment
    'move(uint256,address,uint256)': FunctionFragment
    'open(bytes32,address)': FunctionFragment
    'owns(uint256)': FunctionFragment
    'urns(uint256)': FunctionFragment
    'vat()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'cdpCan', values: [string, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'count', values: [string]): string
  encodeFunctionData(functionFragment: 'flux', values: [BigNumberish, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'frob', values: [BigNumberish, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'give', values: [BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'ilks', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'last', values: [string]): string
  encodeFunctionData(functionFragment: 'move', values: [BigNumberish, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'open', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'owns', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'urns', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'vat', values?: undefined): string

  decodeFunctionResult(functionFragment: 'cdpCan', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'count', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'flux', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'frob', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'give', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ilks', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'last', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'move', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'open', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owns', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'urns', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'vat', data: BytesLike): Result

  events: {}
}

export class DssCdpManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: DssCdpManagerInterface

  functions: {
    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'cdpCan(address,uint256,address)'(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    count(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'count(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    flux(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'flux(uint256,address,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    frob(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'frob(uint256,int256,int256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    give(arg0: BigNumberish, arg1: string, overrides?: Overrides): Promise<ContractTransaction>

    'give(uint256,address)'(arg0: BigNumberish, arg1: string, overrides?: Overrides): Promise<ContractTransaction>

    ilks(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'ilks(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    last(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'last(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    move(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'move(uint256,address,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    open(arg0: BytesLike, arg1: string, overrides?: Overrides): Promise<ContractTransaction>

    'open(bytes32,address)'(arg0: BytesLike, arg1: string, overrides?: Overrides): Promise<ContractTransaction>

    owns(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'owns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    urns(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'urns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    vat(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'vat()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>
  }

  cdpCan(arg0: string, arg1: BigNumberish, arg2: string, overrides?: CallOverrides): Promise<BigNumber>

  'cdpCan(address,uint256,address)'(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'count(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  flux(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'flux(uint256,address,uint256)'(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  frob(arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'frob(uint256,int256,int256)'(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  give(arg0: BigNumberish, arg1: string, overrides?: Overrides): Promise<ContractTransaction>

  'give(uint256,address)'(arg0: BigNumberish, arg1: string, overrides?: Overrides): Promise<ContractTransaction>

  ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'ilks(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'last(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  move(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'move(uint256,address,uint256)'(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  open(arg0: BytesLike, arg1: string, overrides?: Overrides): Promise<ContractTransaction>

  'open(bytes32,address)'(arg0: BytesLike, arg1: string, overrides?: Overrides): Promise<ContractTransaction>

  owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'owns(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'urns(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  vat(overrides?: CallOverrides): Promise<string>

  'vat()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    cdpCan(arg0: string, arg1: BigNumberish, arg2: string, overrides?: CallOverrides): Promise<BigNumber>

    'cdpCan(address,uint256,address)'(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'count(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    flux(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<void>

    'flux(uint256,address,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    frob(arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish, overrides?: CallOverrides): Promise<void>

    'frob(uint256,int256,int256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    give(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<void>

    'give(uint256,address)'(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<void>

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'ilks(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'last(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    move(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<void>

    'move(uint256,address,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    open(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'open(bytes32,address)'(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'owns(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'urns(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    vat(overrides?: CallOverrides): Promise<string>

    'vat()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    cdpCan(arg0: string, arg1: BigNumberish, arg2: string, overrides?: CallOverrides): Promise<BigNumber>

    'cdpCan(address,uint256,address)'(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'count(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    flux(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'flux(uint256,address,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    frob(arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'frob(uint256,int256,int256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    give(arg0: BigNumberish, arg1: string, overrides?: Overrides): Promise<BigNumber>

    'give(uint256,address)'(arg0: BigNumberish, arg1: string, overrides?: Overrides): Promise<BigNumber>

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'ilks(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'last(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    move(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'move(uint256,address,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    open(arg0: BytesLike, arg1: string, overrides?: Overrides): Promise<BigNumber>

    'open(bytes32,address)'(arg0: BytesLike, arg1: string, overrides?: Overrides): Promise<BigNumber>

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'owns(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'urns(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    vat(overrides?: CallOverrides): Promise<BigNumber>

    'vat()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    cdpCan(arg0: string, arg1: BigNumberish, arg2: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'cdpCan(address,uint256,address)'(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    count(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'count(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    flux(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'flux(uint256,address,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    frob(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'frob(uint256,int256,int256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    give(arg0: BigNumberish, arg1: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'give(uint256,address)'(arg0: BigNumberish, arg1: string, overrides?: Overrides): Promise<PopulatedTransaction>

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'ilks(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    last(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'last(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    move(arg0: BigNumberish, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'move(uint256,address,uint256)'(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    open(arg0: BytesLike, arg1: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'open(bytes32,address)'(arg0: BytesLike, arg1: string, overrides?: Overrides): Promise<PopulatedTransaction>

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owns(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'urns(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'vat()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
