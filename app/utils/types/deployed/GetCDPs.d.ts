/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface GetCDPsInterface extends ethers.utils.Interface {
  functions: {
    'getCdpsAsc(address,address)': FunctionFragment
    'getCdpsDesc(address,address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'getCdpsAsc', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getCdpsDesc', values: [string, string]): string

  decodeFunctionResult(functionFragment: 'getCdpsAsc', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCdpsDesc', data: BytesLike): Result

  events: {}
}

export class GetCDPs extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: GetCDPsInterface

  functions: {
    getCdpsAsc(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<{
      ids: BigNumber[]
      urns: string[]
      ilks: string[]
      0: BigNumber[]
      1: string[]
      2: string[]
    }>

    'getCdpsAsc(address,address)'(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<{
      ids: BigNumber[]
      urns: string[]
      ilks: string[]
      0: BigNumber[]
      1: string[]
      2: string[]
    }>

    getCdpsDesc(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<{
      ids: BigNumber[]
      urns: string[]
      ilks: string[]
      0: BigNumber[]
      1: string[]
      2: string[]
    }>

    'getCdpsDesc(address,address)'(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<{
      ids: BigNumber[]
      urns: string[]
      ilks: string[]
      0: BigNumber[]
      1: string[]
      2: string[]
    }>
  }

  getCdpsAsc(
    manager: string,
    guy: string,
    overrides?: CallOverrides,
  ): Promise<{
    ids: BigNumber[]
    urns: string[]
    ilks: string[]
    0: BigNumber[]
    1: string[]
    2: string[]
  }>

  'getCdpsAsc(address,address)'(
    manager: string,
    guy: string,
    overrides?: CallOverrides,
  ): Promise<{
    ids: BigNumber[]
    urns: string[]
    ilks: string[]
    0: BigNumber[]
    1: string[]
    2: string[]
  }>

  getCdpsDesc(
    manager: string,
    guy: string,
    overrides?: CallOverrides,
  ): Promise<{
    ids: BigNumber[]
    urns: string[]
    ilks: string[]
    0: BigNumber[]
    1: string[]
    2: string[]
  }>

  'getCdpsDesc(address,address)'(
    manager: string,
    guy: string,
    overrides?: CallOverrides,
  ): Promise<{
    ids: BigNumber[]
    urns: string[]
    ilks: string[]
    0: BigNumber[]
    1: string[]
    2: string[]
  }>

  callStatic: {
    getCdpsAsc(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<{
      ids: BigNumber[]
      urns: string[]
      ilks: string[]
      0: BigNumber[]
      1: string[]
      2: string[]
    }>

    'getCdpsAsc(address,address)'(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<{
      ids: BigNumber[]
      urns: string[]
      ilks: string[]
      0: BigNumber[]
      1: string[]
      2: string[]
    }>

    getCdpsDesc(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<{
      ids: BigNumber[]
      urns: string[]
      ilks: string[]
      0: BigNumber[]
      1: string[]
      2: string[]
    }>

    'getCdpsDesc(address,address)'(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<{
      ids: BigNumber[]
      urns: string[]
      ilks: string[]
      0: BigNumber[]
      1: string[]
      2: string[]
    }>
  }

  filters: {}

  estimateGas: {
    getCdpsAsc(manager: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>

    'getCdpsAsc(address,address)'(manager: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>

    getCdpsDesc(manager: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>

    'getCdpsDesc(address,address)'(manager: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    getCdpsAsc(manager: string, guy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getCdpsAsc(address,address)'(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCdpsDesc(manager: string, guy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getCdpsDesc(address,address)'(
      manager: string,
      guy: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
