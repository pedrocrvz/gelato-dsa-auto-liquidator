/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface AccountInterfaceFFInterface extends ethers.utils.Interface {
  functions: {
    'isAuth(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'isAuth', values: [string]): string

  decodeFunctionResult(functionFragment: 'isAuth', data: BytesLike): Result

  events: {}
}

export class AccountInterfaceFF extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: AccountInterfaceFFInterface

  functions: {
    isAuth(
      _user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isAuth(address)'(
      _user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>
  }

  isAuth(_user: string, overrides?: CallOverrides): Promise<boolean>

  'isAuth(address)'(_user: string, overrides?: CallOverrides): Promise<boolean>

  callStatic: {
    isAuth(_user: string, overrides?: CallOverrides): Promise<boolean>

    'isAuth(address)'(_user: string, overrides?: CallOverrides): Promise<boolean>
  }

  filters: {}

  estimateGas: {
    isAuth(_user: string, overrides?: CallOverrides): Promise<BigNumber>

    'isAuth(address)'(_user: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    isAuth(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isAuth(address)'(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
