/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IConnectMakerInterface extends ethers.utils.Interface {
  functions: {
    'borrow(uint256,uint256,uint256,uint256)': FunctionFragment
    'deposit(uint256,uint256,uint256,uint256)': FunctionFragment
    'open(string)': FunctionFragment
    'payback(uint256,uint256,uint256,uint256)': FunctionFragment
    'withdraw(uint256,uint256,uint256,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'borrow',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'open', values: [string]): string
  encodeFunctionData(
    functionFragment: 'payback',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string

  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'open', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payback', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {}
}

export class IConnectMaker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IConnectMakerInterface

  functions: {
    borrow(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'borrow(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    deposit(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'deposit(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    open(colType: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    'open(string)'(colType: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    payback(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'payback(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    withdraw(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'withdraw(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>
  }

  borrow(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'borrow(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  deposit(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'deposit(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  open(colType: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  'open(string)'(colType: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  payback(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'payback(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  withdraw(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'withdraw(uint256,uint256,uint256,uint256)'(
    vault: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  callStatic: {
    borrow(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'borrow(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    deposit(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'deposit(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    open(colType: string, overrides?: CallOverrides): Promise<BigNumber>

    'open(string)'(colType: string, overrides?: CallOverrides): Promise<BigNumber>

    payback(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'payback(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    withdraw(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'withdraw(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    borrow(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'borrow(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    deposit(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'deposit(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    open(colType: string, overrides?: PayableOverrides): Promise<BigNumber>

    'open(string)'(colType: string, overrides?: PayableOverrides): Promise<BigNumber>

    payback(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'payback(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    withdraw(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'withdraw(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    borrow(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'borrow(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    deposit(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'deposit(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    open(colType: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'open(string)'(colType: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    payback(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'payback(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    withdraw(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'withdraw(uint256,uint256,uint256,uint256)'(
      vault: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>
  }
}
