/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface MockAutoLiquidationExecutorInterface extends ethers.utils.Interface {
  functions: {
    'canExec(tuple,uint256,uint256)': FunctionFragment
    'exec(tuple)': FunctionFragment
    'execViaRoute0(tuple)': FunctionFragment
    'execViaRoute1(tuple)': FunctionFragment
    'execViaRoute2(tuple)': FunctionFragment
    'execViaRoute3(tuple)': FunctionFragment
    'gelatoCore()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'canExec',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'exec',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'execViaRoute0',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'execViaRoute1',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'execViaRoute2',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'execViaRoute3',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'gelatoCore', values?: undefined): string

  decodeFunctionResult(functionFragment: 'canExec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execViaRoute0', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execViaRoute1', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execViaRoute2', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execViaRoute3', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'gelatoCore', data: BytesLike): Result

  events: {}
}

export class MockAutoLiquidationExecutor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: MockAutoLiquidationExecutorInterface

  functions: {
    canExec(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'canExec(tuple,uint256,uint256)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    exec(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'exec(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    execViaRoute0(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'execViaRoute0(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    execViaRoute1(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'execViaRoute1(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    execViaRoute2(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'execViaRoute2(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    execViaRoute3(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'execViaRoute3(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    gelatoCore(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'gelatoCore()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>
  }

  canExec(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    _gasLimit: BigNumberish,
    _execTxGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  'canExec(tuple,uint256,uint256)'(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    _gasLimit: BigNumberish,
    _execTxGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  exec(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'exec(tuple)'(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  execViaRoute0(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'execViaRoute0(tuple)'(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  execViaRoute1(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'execViaRoute1(tuple)'(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  execViaRoute2(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'execViaRoute2(tuple)'(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  execViaRoute3(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'execViaRoute3(tuple)'(
    _taskReceipt: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  gelatoCore(overrides?: CallOverrides): Promise<string>

  'gelatoCore()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    canExec(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    'canExec(tuple,uint256,uint256)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    exec(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'exec(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    execViaRoute0(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'execViaRoute0(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    execViaRoute1(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'execViaRoute1(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    execViaRoute2(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'execViaRoute2(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    execViaRoute3(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'execViaRoute3(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    gelatoCore(overrides?: CallOverrides): Promise<string>

    'gelatoCore()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    canExec(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'canExec(tuple,uint256,uint256)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    exec(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'exec(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    execViaRoute0(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'execViaRoute0(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    execViaRoute1(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'execViaRoute1(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    execViaRoute2(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'execViaRoute2(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    execViaRoute3(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'execViaRoute3(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    gelatoCore(overrides?: CallOverrides): Promise<BigNumber>

    'gelatoCore()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    canExec(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'canExec(tuple,uint256,uint256)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    exec(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'exec(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    execViaRoute0(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'execViaRoute0(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    execViaRoute1(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'execViaRoute1(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    execViaRoute2(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'execViaRoute2(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    execViaRoute3(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'execViaRoute3(tuple)'(
      _taskReceipt: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    gelatoCore(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'gelatoCore()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
