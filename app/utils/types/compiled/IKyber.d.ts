/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IKyberInterface extends ethers.utils.Interface {
  functions: {
    'getExpectedRate(address,address,uint256)': FunctionFragment
    'trade(address,uint256,address,address,uint256,uint256,address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'getExpectedRate', values: [string, string, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'trade',
    values: [string, BigNumberish, string, string, BigNumberish, BigNumberish, string],
  ): string

  decodeFunctionResult(functionFragment: 'getExpectedRate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'trade', data: BytesLike): Result

  events: {}
}

export class IKyber extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IKyberInterface

  functions: {
    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>

    'getExpectedRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'trade(address,uint256,address,address,uint256,uint256,address)'(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>
  }

  getExpectedRate(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    0: BigNumber
    1: BigNumber
  }>

  'getExpectedRate(address,address,uint256)'(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    0: BigNumber
    1: BigNumber
  }>

  trade(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'trade(address,uint256,address,address,uint256,uint256,address)'(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  callStatic: {
    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>

    'getExpectedRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'trade(address,uint256,address,address,uint256,uint256,address)'(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    getExpectedRate(src: string, dest: string, srcQty: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getExpectedRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'trade(address,uint256,address,address,uint256,uint256,address)'(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getExpectedRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'trade(address,uint256,address,address,uint256,uint256,address)'(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>
  }
}
