/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IGelatoProviderModuleInterface extends ethers.utils.Interface {
  functions: {
    'execPayload(uint256,address,address,tuple,uint256)': FunctionFragment
    'execRevertCheck(bytes)': FunctionFragment
    'isProvided(address,address,tuple)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'execPayload',
    values: [
      BigNumberish,
      string,
      string,
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(functionFragment: 'execRevertCheck', values: [BytesLike]): string
  encodeFunctionData(
    functionFragment: 'isProvided',
    values: [
      string,
      string,
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
    ],
  ): string

  decodeFunctionResult(functionFragment: 'execPayload', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execRevertCheck', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isProvided', data: BytesLike): Result

  events: {}
}

export class IGelatoProviderModule extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IGelatoProviderModuleInterface

  functions: {
    execPayload(
      _taskReceiptId: BigNumberish,
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _cycleId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      checkReturndata: boolean
      0: string
      1: boolean
    }>

    'execPayload(uint256,address,address,tuple,uint256)'(
      _taskReceiptId: BigNumberish,
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _cycleId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      checkReturndata: boolean
      0: string
      1: boolean
    }>

    execRevertCheck(
      _proxyReturndata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: void
    }>

    'execRevertCheck(bytes)'(
      _proxyReturndata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: void
    }>

    isProvided(
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'isProvided(address,address,tuple)'(
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>
  }

  execPayload(
    _taskReceiptId: BigNumberish,
    _userProxy: string,
    _provider: string,
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _cycleId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    checkReturndata: boolean
    0: string
    1: boolean
  }>

  'execPayload(uint256,address,address,tuple,uint256)'(
    _taskReceiptId: BigNumberish,
    _userProxy: string,
    _provider: string,
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _cycleId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    checkReturndata: boolean
    0: string
    1: boolean
  }>

  execRevertCheck(_proxyReturndata: BytesLike, overrides?: CallOverrides): Promise<void>

  'execRevertCheck(bytes)'(_proxyReturndata: BytesLike, overrides?: CallOverrides): Promise<void>

  isProvided(
    _userProxy: string,
    _provider: string,
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'isProvided(address,address,tuple)'(
    _userProxy: string,
    _provider: string,
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  callStatic: {
    execPayload(
      _taskReceiptId: BigNumberish,
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _cycleId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      checkReturndata: boolean
      0: string
      1: boolean
    }>

    'execPayload(uint256,address,address,tuple,uint256)'(
      _taskReceiptId: BigNumberish,
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _cycleId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      checkReturndata: boolean
      0: string
      1: boolean
    }>

    execRevertCheck(_proxyReturndata: BytesLike, overrides?: CallOverrides): Promise<void>

    'execRevertCheck(bytes)'(_proxyReturndata: BytesLike, overrides?: CallOverrides): Promise<void>

    isProvided(
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'isProvided(address,address,tuple)'(
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>
  }

  filters: {}

  estimateGas: {
    execPayload(
      _taskReceiptId: BigNumberish,
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _cycleId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'execPayload(uint256,address,address,tuple,uint256)'(
      _taskReceiptId: BigNumberish,
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _cycleId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    execRevertCheck(_proxyReturndata: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'execRevertCheck(bytes)'(_proxyReturndata: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    isProvided(
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'isProvided(address,address,tuple)'(
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    execPayload(
      _taskReceiptId: BigNumberish,
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _cycleId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'execPayload(uint256,address,address,tuple,uint256)'(
      _taskReceiptId: BigNumberish,
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _cycleId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    execRevertCheck(_proxyReturndata: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'execRevertCheck(bytes)'(_proxyReturndata: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isProvided(
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'isProvided(address,address,tuple)'(
      _userProxy: string,
      _provider: string,
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
