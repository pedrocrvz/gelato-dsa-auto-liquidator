/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IGelatoProvidersInterface extends ethers.utils.Interface {
  functions: {
    'NO_CEIL()': FunctionFragment
    'addProviderModules(address[])': FunctionFragment
    'executorAssignsExecutor(address,address)': FunctionFragment
    'executorByProvider(address)': FunctionFragment
    'executorProvidersCount(address)': FunctionFragment
    'executorStake(address)': FunctionFragment
    'hashTaskSpec(tuple)': FunctionFragment
    'isExecutorAssigned(address)': FunctionFragment
    'isExecutorMinStaked(address)': FunctionFragment
    'isModuleProvided(address,address)': FunctionFragment
    'isProviderLiquid(address,uint256,uint256)': FunctionFragment
    'isTaskProvided(address,tuple,tuple)': FunctionFragment
    'isTaskSpecProvided(address,tuple)': FunctionFragment
    'minExecProviderFunds(uint256,uint256)': FunctionFragment
    'multiProvide(address,tuple[],address[])': FunctionFragment
    'multiUnprovide(uint256,tuple[],address[])': FunctionFragment
    'provideFunds(address)': FunctionFragment
    'provideTaskSpecs(tuple[])': FunctionFragment
    'providerAssignsExecutor(address)': FunctionFragment
    'providerCanExec(address,tuple,tuple,uint256)': FunctionFragment
    'providerFunds(address)': FunctionFragment
    'providerModuleChecks(address,tuple,tuple)': FunctionFragment
    'providerModules(address)': FunctionFragment
    'removeProviderModules(address[])': FunctionFragment
    'setTaskSpecGasPriceCeil(bytes32,uint256)': FunctionFragment
    'taskSpecGasPriceCeil(address,bytes32)': FunctionFragment
    'unprovideFunds(uint256)': FunctionFragment
    'unprovideTaskSpecs(tuple[])': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'NO_CEIL', values?: undefined): string
  encodeFunctionData(functionFragment: 'addProviderModules', values: [string[]]): string
  encodeFunctionData(functionFragment: 'executorAssignsExecutor', values: [string, string]): string
  encodeFunctionData(functionFragment: 'executorByProvider', values: [string]): string
  encodeFunctionData(functionFragment: 'executorProvidersCount', values: [string]): string
  encodeFunctionData(functionFragment: 'executorStake', values: [string]): string
  encodeFunctionData(
    functionFragment: 'hashTaskSpec',
    values: [
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'isExecutorAssigned', values: [string]): string
  encodeFunctionData(functionFragment: 'isExecutorMinStaked', values: [string]): string
  encodeFunctionData(functionFragment: 'isModuleProvided', values: [string, string]): string
  encodeFunctionData(functionFragment: 'isProviderLiquid', values: [string, BigNumberish, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'isTaskProvided',
    values: [
      string,
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'isTaskSpecProvided',
    values: [
      string,
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'minExecProviderFunds', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'multiProvide',
    values: [
      string,
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      string[],
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'multiUnprovide',
    values: [
      BigNumberish,
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      string[],
    ],
  ): string
  encodeFunctionData(functionFragment: 'provideFunds', values: [string]): string
  encodeFunctionData(
    functionFragment: 'provideTaskSpecs',
    values: [
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
    ],
  ): string
  encodeFunctionData(functionFragment: 'providerAssignsExecutor', values: [string]): string
  encodeFunctionData(
    functionFragment: 'providerCanExec',
    values: [
      string,
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(functionFragment: 'providerFunds', values: [string]): string
  encodeFunctionData(
    functionFragment: 'providerModuleChecks',
    values: [
      string,
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'providerModules', values: [string]): string
  encodeFunctionData(functionFragment: 'removeProviderModules', values: [string[]]): string
  encodeFunctionData(functionFragment: 'setTaskSpecGasPriceCeil', values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'taskSpecGasPriceCeil', values: [string, BytesLike]): string
  encodeFunctionData(functionFragment: 'unprovideFunds', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'unprovideTaskSpecs',
    values: [
      {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
    ],
  ): string

  decodeFunctionResult(functionFragment: 'NO_CEIL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addProviderModules', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorAssignsExecutor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorByProvider', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorProvidersCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executorStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hashTaskSpec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isExecutorAssigned', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isExecutorMinStaked', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isModuleProvided', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isProviderLiquid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isTaskProvided', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isTaskSpecProvided', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'minExecProviderFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiProvide', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiUnprovide', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'provideFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'provideTaskSpecs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerAssignsExecutor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerCanExec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerModuleChecks', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'providerModules', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeProviderModules', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setTaskSpecGasPriceCeil', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'taskSpecGasPriceCeil', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unprovideFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unprovideTaskSpecs', data: BytesLike): Result

  events: {
    'LogExecutorAssignedExecutor(address,address,address)': EventFragment
    'LogFundsProvided(address,uint256,uint256)': EventFragment
    'LogFundsUnprovided(address,uint256,uint256)': EventFragment
    'LogProviderAssignedExecutor(address,address,address)': EventFragment
    'LogProviderModuleAdded(address,address)': EventFragment
    'LogProviderModuleRemoved(address,address)': EventFragment
    'LogTaskSpecGasPriceCeilSet(address,bytes32,uint256,uint256)': EventFragment
    'LogTaskSpecProvided(address,bytes32)': EventFragment
    'LogTaskSpecUnprovided(address,bytes32)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogExecutorAssignedExecutor'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogFundsProvided'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogFundsUnprovided'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogProviderAssignedExecutor'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogProviderModuleAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogProviderModuleRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskSpecGasPriceCeilSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskSpecProvided'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskSpecUnprovided'): EventFragment
}

export class IGelatoProviders extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IGelatoProvidersInterface

  functions: {
    NO_CEIL(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'NO_CEIL()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    addProviderModules(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

    'addProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

    executorAssignsExecutor(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'executorAssignsExecutor(address,address)'(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    executorByProvider(
      _provider: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'executorByProvider(address)'(
      _provider: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    executorProvidersCount(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'executorProvidersCount(address)'(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    executorStake(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'executorStake(address)'(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    hashTaskSpec(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'hashTaskSpec(tuple)'(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    isExecutorAssigned(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isExecutorAssigned(address)'(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isExecutorMinStaked(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isExecutorMinStaked(address)'(
      _executor: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isModuleProvided(
      _provider: string,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isModuleProvided(address,address)'(
      _provider: string,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'isProviderLiquid(address,uint256,uint256)'(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      res: string
      0: string
    }>

    'isTaskProvided(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      res: string
      0: string
    }>

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'isTaskSpecProvided(address,tuple)'(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'minExecProviderFunds(uint256,uint256)'(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'multiProvide(address,tuple[],address[])'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'multiUnprovide(uint256,tuple[],address[])'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    provideFunds(_provider: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    'provideFunds(address)'(_provider: string, overrides?: PayableOverrides): Promise<ContractTransaction>

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'provideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    providerAssignsExecutor(_executor: string, overrides?: Overrides): Promise<ContractTransaction>

    'providerAssignsExecutor(address)'(_executor: string, overrides?: Overrides): Promise<ContractTransaction>

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      res: string
      0: string
    }>

    'providerCanExec(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      res: string
      0: string
    }>

    providerFunds(
      _provider: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'providerFunds(address)'(
      _provider: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'providerModuleChecks(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    providerModules(
      _provider: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string[]
    }>

    'providerModules(address)'(
      _provider: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string[]
    }>

    removeProviderModules(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

    'removeProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

    setTaskSpecGasPriceCeil(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'setTaskSpecGasPriceCeil(bytes32,uint256)'(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    taskSpecGasPriceCeil(
      _provider: string,
      _taskSpecHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'taskSpecGasPriceCeil(address,bytes32)'(
      _provider: string,
      _taskSpecHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    unprovideFunds(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'unprovideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>
  }

  NO_CEIL(overrides?: CallOverrides): Promise<BigNumber>

  'NO_CEIL()'(overrides?: CallOverrides): Promise<BigNumber>

  addProviderModules(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

  'addProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

  executorAssignsExecutor(_provider: string, _newExecutor: string, overrides?: Overrides): Promise<ContractTransaction>

  'executorAssignsExecutor(address,address)'(
    _provider: string,
    _newExecutor: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  executorByProvider(_provider: string, overrides?: CallOverrides): Promise<string>

  'executorByProvider(address)'(_provider: string, overrides?: CallOverrides): Promise<string>

  executorProvidersCount(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

  'executorProvidersCount(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

  executorStake(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

  'executorStake(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

  hashTaskSpec(
    _taskSpec: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'hashTaskSpec(tuple)'(
    _taskSpec: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  isExecutorAssigned(_executor: string, overrides?: CallOverrides): Promise<boolean>

  'isExecutorAssigned(address)'(_executor: string, overrides?: CallOverrides): Promise<boolean>

  isExecutorMinStaked(_executor: string, overrides?: CallOverrides): Promise<boolean>

  'isExecutorMinStaked(address)'(_executor: string, overrides?: CallOverrides): Promise<boolean>

  isModuleProvided(_provider: string, _module: string, overrides?: CallOverrides): Promise<boolean>

  'isModuleProvided(address,address)'(_provider: string, _module: string, overrides?: CallOverrides): Promise<boolean>

  isProviderLiquid(
    _provider: string,
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>

  'isProviderLiquid(address,uint256,uint256)'(
    _provider: string,
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>

  isTaskProvided(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'isTaskProvided(address,tuple,tuple)'(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  isTaskSpecProvided(
    _provider: string,
    _taskSpec: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'isTaskSpecProvided(address,tuple)'(
    _provider: string,
    _taskSpec: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  minExecProviderFunds(
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  'minExecProviderFunds(uint256,uint256)'(
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  multiProvide(
    _executor: string,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'multiProvide(address,tuple[],address[])'(
    _executor: string,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  multiUnprovide(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'multiUnprovide(uint256,tuple[],address[])'(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    _modules: string[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  provideFunds(_provider: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  'provideFunds(address)'(_provider: string, overrides?: PayableOverrides): Promise<ContractTransaction>

  provideTaskSpecs(
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'provideTaskSpecs(tuple[])'(
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  providerAssignsExecutor(_executor: string, overrides?: Overrides): Promise<ContractTransaction>

  'providerAssignsExecutor(address)'(_executor: string, overrides?: Overrides): Promise<ContractTransaction>

  providerCanExec(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  'providerCanExec(address,tuple,tuple,uint256)'(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _gelatoGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  providerFunds(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

  'providerFunds(address)'(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

  providerModuleChecks(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'providerModuleChecks(address,tuple,tuple)'(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  providerModules(_provider: string, overrides?: CallOverrides): Promise<string[]>

  'providerModules(address)'(_provider: string, overrides?: CallOverrides): Promise<string[]>

  removeProviderModules(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

  'removeProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<ContractTransaction>

  setTaskSpecGasPriceCeil(
    _taskSpecHash: BytesLike,
    _gasPriceCeil: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'setTaskSpecGasPriceCeil(bytes32,uint256)'(
    _taskSpecHash: BytesLike,
    _gasPriceCeil: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  taskSpecGasPriceCeil(_provider: string, _taskSpecHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  'taskSpecGasPriceCeil(address,bytes32)'(
    _provider: string,
    _taskSpecHash: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  unprovideFunds(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  unprovideTaskSpecs(
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'unprovideTaskSpecs(tuple[])'(
    _taskSpecs: {
      conditions: string[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      gasPriceCeil: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  callStatic: {
    NO_CEIL(overrides?: CallOverrides): Promise<BigNumber>

    'NO_CEIL()'(overrides?: CallOverrides): Promise<BigNumber>

    addProviderModules(_modules: string[], overrides?: CallOverrides): Promise<void>

    'addProviderModules(address[])'(_modules: string[], overrides?: CallOverrides): Promise<void>

    executorAssignsExecutor(_provider: string, _newExecutor: string, overrides?: CallOverrides): Promise<void>

    'executorAssignsExecutor(address,address)'(
      _provider: string,
      _newExecutor: string,
      overrides?: CallOverrides,
    ): Promise<void>

    executorByProvider(_provider: string, overrides?: CallOverrides): Promise<string>

    'executorByProvider(address)'(_provider: string, overrides?: CallOverrides): Promise<string>

    executorProvidersCount(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorProvidersCount(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    executorStake(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorStake(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    hashTaskSpec(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'hashTaskSpec(tuple)'(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    isExecutorAssigned(_executor: string, overrides?: CallOverrides): Promise<boolean>

    'isExecutorAssigned(address)'(_executor: string, overrides?: CallOverrides): Promise<boolean>

    isExecutorMinStaked(_executor: string, overrides?: CallOverrides): Promise<boolean>

    'isExecutorMinStaked(address)'(_executor: string, overrides?: CallOverrides): Promise<boolean>

    isModuleProvided(_provider: string, _module: string, overrides?: CallOverrides): Promise<boolean>

    'isModuleProvided(address,address)'(_provider: string, _module: string, overrides?: CallOverrides): Promise<boolean>

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'isProviderLiquid(address,uint256,uint256)'(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'isTaskProvided(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'isTaskSpecProvided(address,tuple)'(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'minExecProviderFunds(uint256,uint256)'(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    'multiProvide(address,tuple[],address[])'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    'multiUnprovide(uint256,tuple[],address[])'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    provideFunds(_provider: string, overrides?: CallOverrides): Promise<void>

    'provideFunds(address)'(_provider: string, overrides?: CallOverrides): Promise<void>

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    'provideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    providerAssignsExecutor(_executor: string, overrides?: CallOverrides): Promise<void>

    'providerAssignsExecutor(address)'(_executor: string, overrides?: CallOverrides): Promise<void>

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    'providerCanExec(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    providerFunds(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    'providerFunds(address)'(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'providerModuleChecks(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    providerModules(_provider: string, overrides?: CallOverrides): Promise<string[]>

    'providerModules(address)'(_provider: string, overrides?: CallOverrides): Promise<string[]>

    removeProviderModules(_modules: string[], overrides?: CallOverrides): Promise<void>

    'removeProviderModules(address[])'(_modules: string[], overrides?: CallOverrides): Promise<void>

    setTaskSpecGasPriceCeil(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'setTaskSpecGasPriceCeil(bytes32,uint256)'(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    taskSpecGasPriceCeil(_provider: string, _taskSpecHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'taskSpecGasPriceCeil(address,bytes32)'(
      _provider: string,
      _taskSpecHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    unprovideFunds(_withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    'unprovideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    LogExecutorAssignedExecutor(
      provider: string | null,
      oldExecutor: string | null,
      newExecutor: string | null,
    ): EventFilter

    LogFundsProvided(provider: string | null, amount: null, newProviderFunds: null): EventFilter

    LogFundsUnprovided(provider: string | null, realWithdrawAmount: null, newProviderFunds: null): EventFilter

    LogProviderAssignedExecutor(
      provider: string | null,
      oldExecutor: string | null,
      newExecutor: string | null,
    ): EventFilter

    LogProviderModuleAdded(provider: string | null, module: string | null): EventFilter

    LogProviderModuleRemoved(provider: string | null, module: string | null): EventFilter

    LogTaskSpecGasPriceCeilSet(
      provider: string | null,
      taskSpecHash: null,
      oldTaskSpecGasPriceCeil: null,
      newTaskSpecGasPriceCeil: null,
    ): EventFilter

    LogTaskSpecProvided(provider: string | null, taskSpecHash: BytesLike | null): EventFilter

    LogTaskSpecUnprovided(provider: string | null, taskSpecHash: BytesLike | null): EventFilter
  }

  estimateGas: {
    NO_CEIL(overrides?: CallOverrides): Promise<BigNumber>

    'NO_CEIL()'(overrides?: CallOverrides): Promise<BigNumber>

    addProviderModules(_modules: string[], overrides?: Overrides): Promise<BigNumber>

    'addProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<BigNumber>

    executorAssignsExecutor(_provider: string, _newExecutor: string, overrides?: Overrides): Promise<BigNumber>

    'executorAssignsExecutor(address,address)'(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    executorByProvider(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorByProvider(address)'(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    executorProvidersCount(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorProvidersCount(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    executorStake(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    'executorStake(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    hashTaskSpec(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'hashTaskSpec(tuple)'(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isExecutorAssigned(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    'isExecutorAssigned(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    isExecutorMinStaked(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    'isExecutorMinStaked(address)'(_executor: string, overrides?: CallOverrides): Promise<BigNumber>

    isModuleProvided(_provider: string, _module: string, overrides?: CallOverrides): Promise<BigNumber>

    'isModuleProvided(address,address)'(
      _provider: string,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'isProviderLiquid(address,uint256,uint256)'(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'isTaskProvided(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'isTaskSpecProvided(address,tuple)'(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'minExecProviderFunds(uint256,uint256)'(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'multiProvide(address,tuple[],address[])'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'multiUnprovide(uint256,tuple[],address[])'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    provideFunds(_provider: string, overrides?: PayableOverrides): Promise<BigNumber>

    'provideFunds(address)'(_provider: string, overrides?: PayableOverrides): Promise<BigNumber>

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'provideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    providerAssignsExecutor(_executor: string, overrides?: Overrides): Promise<BigNumber>

    'providerAssignsExecutor(address)'(_executor: string, overrides?: Overrides): Promise<BigNumber>

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'providerCanExec(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    providerFunds(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    'providerFunds(address)'(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'providerModuleChecks(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    providerModules(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    'providerModules(address)'(_provider: string, overrides?: CallOverrides): Promise<BigNumber>

    removeProviderModules(_modules: string[], overrides?: Overrides): Promise<BigNumber>

    'removeProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<BigNumber>

    setTaskSpecGasPriceCeil(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'setTaskSpecGasPriceCeil(bytes32,uint256)'(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    taskSpecGasPriceCeil(_provider: string, _taskSpecHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'taskSpecGasPriceCeil(address,bytes32)'(
      _provider: string,
      _taskSpecHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    unprovideFunds(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'unprovideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    NO_CEIL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'NO_CEIL()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addProviderModules(_modules: string[], overrides?: Overrides): Promise<PopulatedTransaction>

    'addProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<PopulatedTransaction>

    executorAssignsExecutor(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'executorAssignsExecutor(address,address)'(
      _provider: string,
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    executorByProvider(_provider: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'executorByProvider(address)'(_provider: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    executorProvidersCount(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'executorProvidersCount(address)'(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    executorStake(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'executorStake(address)'(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    hashTaskSpec(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'hashTaskSpec(tuple)'(
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isExecutorAssigned(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isExecutorAssigned(address)'(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isExecutorMinStaked(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isExecutorMinStaked(address)'(_executor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isModuleProvided(_provider: string, _module: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isModuleProvided(address,address)'(
      _provider: string,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'isProviderLiquid(address,uint256,uint256)'(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'isTaskProvided(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'isTaskSpecProvided(address,tuple)'(
      _provider: string,
      _taskSpec: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'minExecProviderFunds(uint256,uint256)'(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'multiProvide(address,tuple[],address[])'(
      _executor: string,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'multiUnprovide(uint256,tuple[],address[])'(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      _modules: string[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    provideFunds(_provider: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'provideFunds(address)'(_provider: string, overrides?: PayableOverrides): Promise<PopulatedTransaction>

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'provideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    providerAssignsExecutor(_executor: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'providerAssignsExecutor(address)'(_executor: string, overrides?: Overrides): Promise<PopulatedTransaction>

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'providerCanExec(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    providerFunds(_provider: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'providerFunds(address)'(_provider: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'providerModuleChecks(address,tuple,tuple)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    providerModules(_provider: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'providerModules(address)'(_provider: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeProviderModules(_modules: string[], overrides?: Overrides): Promise<PopulatedTransaction>

    'removeProviderModules(address[])'(_modules: string[], overrides?: Overrides): Promise<PopulatedTransaction>

    setTaskSpecGasPriceCeil(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'setTaskSpecGasPriceCeil(bytes32,uint256)'(
      _taskSpecHash: BytesLike,
      _gasPriceCeil: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    taskSpecGasPriceCeil(
      _provider: string,
      _taskSpecHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'taskSpecGasPriceCeil(address,bytes32)'(
      _provider: string,
      _taskSpecHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    unprovideFunds(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'unprovideFunds(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'unprovideTaskSpecs(tuple[])'(
      _taskSpecs: {
        conditions: string[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        gasPriceCeil: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>
  }
}
