/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, PayableOverrides } from '@ethersproject/contracts'

import type { MockAutoLiquidationExecutor } from '../MockAutoLiquidationExecutor'

export class MockAutoLiquidationExecutor__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(_gelatoCore: string, overrides?: PayableOverrides): Promise<MockAutoLiquidationExecutor> {
    return super.deploy(_gelatoCore, overrides || {}) as Promise<MockAutoLiquidationExecutor>
  }
  getDeployTransaction(_gelatoCore: string, overrides?: PayableOverrides): TransactionRequest {
    return super.getDeployTransaction(_gelatoCore, overrides || {})
  }
  attach(address: string): MockAutoLiquidationExecutor {
    return super.attach(address) as MockAutoLiquidationExecutor
  }
  connect(signer: Signer): MockAutoLiquidationExecutor__factory {
    return super.connect(signer) as MockAutoLiquidationExecutor__factory
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockAutoLiquidationExecutor {
    return new Contract(address, _abi, signerOrProvider) as MockAutoLiquidationExecutor
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_gelatoCore',
        type: 'address',
      },
    ],
    stateMutability: 'payable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'userProxy',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'addr',
                type: 'address',
              },
              {
                internalType: 'contract IGelatoProviderModule',
                name: 'module',
                type: 'address',
              },
            ],
            internalType: 'struct Provider',
            name: 'provider',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'index',
            type: 'uint256',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'contract IGelatoCondition',
                    name: 'inst',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Condition[]',
                name: 'conditions',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                  {
                    internalType: 'enum Operation',
                    name: 'operation',
                    type: 'uint8',
                  },
                  {
                    internalType: 'enum DataFlow',
                    name: 'dataFlow',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bool',
                    name: 'termsOkCheck',
                    type: 'bool',
                  },
                ],
                internalType: 'struct Action[]',
                name: 'actions',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasPriceCeil',
                type: 'uint256',
              },
            ],
            internalType: 'struct Task[]',
            name: 'tasks',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'expiryDate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'cycleId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'submissionsLeft',
            type: 'uint256',
          },
        ],
        internalType: 'struct TaskReceipt',
        name: '_taskReceipt',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: '_gasLimit',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_execTxGasPrice',
        type: 'uint256',
      },
    ],
    name: 'canExec',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'userProxy',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'addr',
                type: 'address',
              },
              {
                internalType: 'contract IGelatoProviderModule',
                name: 'module',
                type: 'address',
              },
            ],
            internalType: 'struct Provider',
            name: 'provider',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'index',
            type: 'uint256',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'contract IGelatoCondition',
                    name: 'inst',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Condition[]',
                name: 'conditions',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                  {
                    internalType: 'enum Operation',
                    name: 'operation',
                    type: 'uint8',
                  },
                  {
                    internalType: 'enum DataFlow',
                    name: 'dataFlow',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bool',
                    name: 'termsOkCheck',
                    type: 'bool',
                  },
                ],
                internalType: 'struct Action[]',
                name: 'actions',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasPriceCeil',
                type: 'uint256',
              },
            ],
            internalType: 'struct Task[]',
            name: 'tasks',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'expiryDate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'cycleId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'submissionsLeft',
            type: 'uint256',
          },
        ],
        internalType: 'struct TaskReceipt',
        name: '_taskReceipt',
        type: 'tuple',
      },
    ],
    name: 'exec',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'userProxy',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'addr',
                type: 'address',
              },
              {
                internalType: 'contract IGelatoProviderModule',
                name: 'module',
                type: 'address',
              },
            ],
            internalType: 'struct Provider',
            name: 'provider',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'index',
            type: 'uint256',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'contract IGelatoCondition',
                    name: 'inst',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Condition[]',
                name: 'conditions',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                  {
                    internalType: 'enum Operation',
                    name: 'operation',
                    type: 'uint8',
                  },
                  {
                    internalType: 'enum DataFlow',
                    name: 'dataFlow',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bool',
                    name: 'termsOkCheck',
                    type: 'bool',
                  },
                ],
                internalType: 'struct Action[]',
                name: 'actions',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasPriceCeil',
                type: 'uint256',
              },
            ],
            internalType: 'struct Task[]',
            name: 'tasks',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'expiryDate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'cycleId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'submissionsLeft',
            type: 'uint256',
          },
        ],
        internalType: 'struct TaskReceipt',
        name: '_taskReceipt',
        type: 'tuple',
      },
    ],
    name: 'execViaRoute0',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'userProxy',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'addr',
                type: 'address',
              },
              {
                internalType: 'contract IGelatoProviderModule',
                name: 'module',
                type: 'address',
              },
            ],
            internalType: 'struct Provider',
            name: 'provider',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'index',
            type: 'uint256',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'contract IGelatoCondition',
                    name: 'inst',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Condition[]',
                name: 'conditions',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                  {
                    internalType: 'enum Operation',
                    name: 'operation',
                    type: 'uint8',
                  },
                  {
                    internalType: 'enum DataFlow',
                    name: 'dataFlow',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bool',
                    name: 'termsOkCheck',
                    type: 'bool',
                  },
                ],
                internalType: 'struct Action[]',
                name: 'actions',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasPriceCeil',
                type: 'uint256',
              },
            ],
            internalType: 'struct Task[]',
            name: 'tasks',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'expiryDate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'cycleId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'submissionsLeft',
            type: 'uint256',
          },
        ],
        internalType: 'struct TaskReceipt',
        name: '_taskReceipt',
        type: 'tuple',
      },
    ],
    name: 'execViaRoute1',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'userProxy',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'addr',
                type: 'address',
              },
              {
                internalType: 'contract IGelatoProviderModule',
                name: 'module',
                type: 'address',
              },
            ],
            internalType: 'struct Provider',
            name: 'provider',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'index',
            type: 'uint256',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'contract IGelatoCondition',
                    name: 'inst',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Condition[]',
                name: 'conditions',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                  {
                    internalType: 'enum Operation',
                    name: 'operation',
                    type: 'uint8',
                  },
                  {
                    internalType: 'enum DataFlow',
                    name: 'dataFlow',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bool',
                    name: 'termsOkCheck',
                    type: 'bool',
                  },
                ],
                internalType: 'struct Action[]',
                name: 'actions',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasPriceCeil',
                type: 'uint256',
              },
            ],
            internalType: 'struct Task[]',
            name: 'tasks',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'expiryDate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'cycleId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'submissionsLeft',
            type: 'uint256',
          },
        ],
        internalType: 'struct TaskReceipt',
        name: '_taskReceipt',
        type: 'tuple',
      },
    ],
    name: 'execViaRoute2',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'userProxy',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'addr',
                type: 'address',
              },
              {
                internalType: 'contract IGelatoProviderModule',
                name: 'module',
                type: 'address',
              },
            ],
            internalType: 'struct Provider',
            name: 'provider',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'index',
            type: 'uint256',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'contract IGelatoCondition',
                    name: 'inst',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Condition[]',
                name: 'conditions',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                  {
                    internalType: 'enum Operation',
                    name: 'operation',
                    type: 'uint8',
                  },
                  {
                    internalType: 'enum DataFlow',
                    name: 'dataFlow',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bool',
                    name: 'termsOkCheck',
                    type: 'bool',
                  },
                ],
                internalType: 'struct Action[]',
                name: 'actions',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'selfProviderGasPriceCeil',
                type: 'uint256',
              },
            ],
            internalType: 'struct Task[]',
            name: 'tasks',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'expiryDate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'cycleId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'submissionsLeft',
            type: 'uint256',
          },
        ],
        internalType: 'struct TaskReceipt',
        name: '_taskReceipt',
        type: 'tuple',
      },
    ],
    name: 'execViaRoute3',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'gelatoCore',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x60806040526040516112c23803806112c28339810160408190526100229161009a565b600080546001600160a01b0319166001600160a01b038381169190911780835560408051635987a2b960e11b81529051919092169263b30f45729234926004808301939282900301818588803b15801561007b57600080fd5b505af115801561008f573d6000803e3d6000fd5b5050505050506100c8565b6000602082840312156100ab578081fd5b81516001600160a01b03811681146100c1578182fd5b9392505050565b6111eb806100d76000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a97549201161005b578063a975492014610082578063d922de9914610082578063dba18bed14610082578063fe861b99146100c05761007d565b806302129232146100825780631f3bb9bc14610097578063a8861a7314610082575b600080fd5b61009561009036600461085e565b6100d5565b005b6100aa6100a536600461080d565b6101a6565b6040516100b79190610ec6565b60405180910390f35b6100c861027b565b6040516100b79190610ea5565b60005a6000546040517fd922de9900000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063d922de999061012f908590600401610f7d565b600060405180830381600087803b15801561014957600080fd5b505af115801561015d573d6000803e3d6000fd5b505050506101a26040518060400160405280601e81526020017f47617320436f737420666f72205461736b20457865637574696f6e20257300008152505a8303610297565b5050565b6000546040517f1f3bb9bc00000000000000000000000000000000000000000000000000000000815260609173ffffffffffffffffffffffffffffffffffffffff1690631f3bb9bc9061020190879087908790600401610ee0565b60006040518083038186803b15801561021957600080fd5b505afa15801561022d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610273919081019061079a565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6101a282826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156102e25781810151838201526020016102ca565b50505050905090810190601f16801561030f5780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d000000000000000000000000000000000000000000000000000000000179052935061039192505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356103bd81611190565b919050565b600082601f8301126103d2578081fd5b81356103e56103e082611032565b61100e565b818152915060208083019084810160005b848110156104dc578135870160c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c0301121561043557600080fd5b6040805182810167ffffffffffffffff828210818311171561045357fe5b8184526104618987016103b2565b83528386013591508082111561047657600080fd5b506104858d89838801016106d2565b8883015250606061049781860161072f565b83830152608092506104aa838601610720565b9082015260a084810135838301526104c38486016106c2565b90820152875250505092820192908201906001016103f6565b505050505092915050565b600082601f8301126104f7578081fd5b81356105056103e082611032565b818152915060208083019084810160005b848110156104dc57813587016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c0301121561055557600080fd5b805181810167ffffffffffffffff828210818311171561057157fe5b908352838701359061058282611190565b81835292840135928084111561059757600080fd5b50506105a78b87848601016106d2565b81870152865250509282019290820190600101610516565b600082601f8301126105cf578081fd5b81356105dd6103e082611032565b818152915060208083019084810160005b848110156104dc57813587016080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c0301121561062d57600080fd5b6040805182810167ffffffffffffffff828210818311171561064b57fe5b90835284880135908082111561066057600080fd5b61066e8e8a848901016104e7565b83528386013591508082111561068357600080fd5b506106928d89838801016103c2565b828901525060608481013592820192909252919092013591810191909152845292820192908201906001016105ee565b803580151581146103bd57600080fd5b600082601f8301126106e2578081fd5b81356106f06103e082611050565b915080825283602082850101111561070757600080fd5b8060208401602084013760009082016020015292915050565b8035600481106103bd57600080fd5b8035600281106103bd57600080fd5b60006040828403121561074f578081fd5b6040516040810181811067ffffffffffffffff8211171561076c57fe5b604052905080823561077d81611190565b8152602083013561078d81611190565b6020919091015292915050565b6000602082840312156107ab578081fd5b815167ffffffffffffffff8111156107c1578182fd5b8201601f810184136107d1578182fd5b80516107df6103e082611050565b8181528560208385010111156107f3578384fd5b610804826020830160208601611160565b95945050505050565b600080600060608486031215610821578182fd5b833567ffffffffffffffff811115610837578283fd5b84016101208187031215610849578283fd5b95602085013595506040909401359392505050565b60006020828403121561086f578081fd5b813567ffffffffffffffff80821115610886578283fd5b90830190610120828603121561089a578283fd5b6101006108a68161100e565b833581526108b6602085016103b2565b60208201526108c8876040860161073e565b60408201526080840135606082015260a0840135838111156108e8578586fd5b6108f4888287016105bf565b60808301525060c084013560a082015260e084013560c08201528184013560e08201528094505050505092915050565b73ffffffffffffffffffffffffffffffffffffffff169052565b818352602080840193600091908185020181018584845b87811015610a4257828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41883603018112610993578687fd5b870160c081356109a281611190565b73ffffffffffffffffffffffffffffffffffffffff1686526109c6828801836110fd565b82898901526109d88389018284610d91565b9250505060406109e981840161072f565b6109f582890182610e31565b50506060610a04818401610720565b610a1082890182610e23565b50506080828101359087015260a0610a298184016106c2565b1515960195909552509784019790840190600101610955565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015610a42578284038952815160c073ffffffffffffffffffffffffffffffffffffffff8251168652868201518188880152610aab82880182610dd9565b915050604080830151610ac082890182610e31565b5050606080830151610ad482890182610e23565b50506080828101519087015260a091820151151591909501529784019790840190600101610a6b565b818352602080840193600091908185020181018584845b87811015610a4257828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81883603018112610b52578687fd5b87016080858101610b638380611090565b9288529082905260a08088019289810289019091019190818b5b82811015610c39577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608b860301865281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1853603018112610bdd578d8efd5b840160408135610bec81611190565b73ffffffffffffffffffffffffffffffffffffffff168752610c10828f01836110fd565b9250818f890152610c248289018483610d91565b988f019897505050918c019150600101610b7d565b50505050610c4988840184611090565b925087820389890152610c5d82848361093e565b604085810135908a015260609485013594909801939093525050509784019790840190600101610b14565b6000815180845260208085018081965082840281019150828601855b85811015610a42578284038952815180516080808752815190870181905260a080880192898302890190910191908901908b5b81811015610d4d578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600185528251805173ffffffffffffffffffffffffffffffffffffffff1685528b015160408c8601819052610d3981870183610dd9565b968d019695505050918a0191600101610cd7565b50505087830151915086810388880152610d678183610a4f565b60408481015190890152606093840151939097019290925250509784019790840190600101610ca4565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b60008151808452610df1816020860160208601611160565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60048110610e2d57fe5b9052565b60028110610e2d57fe5b8035610e4681611190565b73ffffffffffffffffffffffffffffffffffffffff9081168352602082013590610e6f82611190565b808216602085015250505050565b805173ffffffffffffffffffffffffffffffffffffffff908116835260209182015116910152565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060208252610ed96020830184610dd9565b9392505050565b60006060825284356060830152610ef9602086016103b2565b610f066080840182610924565b50610f1760a0830160408701610e3b565b608085013560e0830152610f2e60a0860186611090565b6101206101008181870152610f4861018087018486610afd565b60c08a01359287019290925260e089013561014087015290970135610160850152505050602081019290925260409091015290565b6000602082528251602083015273ffffffffffffffffffffffffffffffffffffffff60208401511660408301526040830151610fbc6060840182610e7d565b50606083015160a083015260808301516101208060c0850152610fe3610140850183610c88565b915060a085015160e085015260c085015161010085015260e085015181850152508091505092915050565b60405181810167ffffffffffffffff8111828210171561102a57fe5b604052919050565b600067ffffffffffffffff82111561104657fe5b5060209081020190565b600067ffffffffffffffff82111561106457fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126110c4578283fd5b830160208101925035905067ffffffffffffffff8111156110e457600080fd5b6020810236038313156110f657600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611131578283fd5b830160208101925035905067ffffffffffffffff81111561115157600080fd5b8036038313156110f657600080fd5b60005b8381101561117b578181015183820152602001611163565b8381111561118a576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146111b257600080fd5b5056fea26469706673582212208a2dd13a9657fd6c022b13d718deceeeb116965964e749b15f7eef5aa40848eb64736f6c63430007040033'
