/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IGelatoCoreInterface extends ethers.utils.Interface {
  functions: {
    'canExec(tuple,uint256,uint256)': FunctionFragment
    'canSubmitTask(address,tuple,tuple,uint256)': FunctionFragment
    'cancelTask(tuple)': FunctionFragment
    'currentTaskReceiptId()': FunctionFragment
    'exec(tuple)': FunctionFragment
    'hashTaskReceipt(tuple)': FunctionFragment
    'multiCancelTasks(tuple[])': FunctionFragment
    'submitTask(tuple,tuple,uint256)': FunctionFragment
    'submitTaskChain(tuple,tuple[],uint256,uint256)': FunctionFragment
    'submitTaskCycle(tuple,tuple[],uint256,uint256)': FunctionFragment
    'taskReceiptHash(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'canExec',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'canSubmitTask',
    values: [
      string,
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'cancelTask',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(functionFragment: 'currentTaskReceiptId', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'exec',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'hashTaskReceipt',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'multiCancelTasks',
    values: [
      {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'submitTask',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'submitTaskChain',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'submitTaskCycle',
    values: [
      { addr: string; module: string },
      {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(functionFragment: 'taskReceiptHash', values: [BigNumberish]): string

  decodeFunctionResult(functionFragment: 'canExec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canSubmitTask', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'cancelTask', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'currentTaskReceiptId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hashTaskReceipt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'multiCancelTasks', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTask', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTaskChain', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitTaskCycle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'taskReceiptHash', data: BytesLike): Result

  events: {
    'LogCanExecFailed(address,uint256,string)': EventFragment
    'LogExecReverted(address,uint256,uint256,string)': EventFragment
    'LogExecSuccess(address,uint256,uint256,uint256)': EventFragment
    'LogTaskCancelled(uint256,address)': EventFragment
    'LogTaskSubmitted(uint256,bytes32,tuple)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogCanExecFailed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecReverted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecSuccess'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskCancelled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTaskSubmitted'): EventFragment
}

export class IGelatoCore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IGelatoCoreInterface

  functions: {
    canExec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'canExec(tuple,uint256,uint256)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'canSubmitTask(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    cancelTask(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'cancelTask(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    currentTaskReceiptId(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'currentTaskReceiptId()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    exec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'exec(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    hashTaskReceipt(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'hashTaskReceipt(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    taskReceiptHash(
      _taskReceiptId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'taskReceiptHash(uint256)'(
      _taskReceiptId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>
  }

  canExec(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    _gasLimit: BigNumberish,
    _execTxGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  'canExec(tuple,uint256,uint256)'(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    _gasLimit: BigNumberish,
    _execTxGasPrice: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  canSubmitTask(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  'canSubmitTask(address,tuple,tuple,uint256)'(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  cancelTask(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'cancelTask(tuple)'(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  currentTaskReceiptId(overrides?: CallOverrides): Promise<BigNumber>

  'currentTaskReceiptId()'(overrides?: CallOverrides): Promise<BigNumber>

  exec(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'exec(tuple)'(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  hashTaskReceipt(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  'hashTaskReceipt(tuple)'(
    _TR: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    },
    overrides?: CallOverrides,
  ): Promise<string>

  multiCancelTasks(
    _taskReceipts: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'multiCancelTasks(tuple[])'(
    _taskReceipts: {
      id: BigNumberish
      userProxy: string
      provider: { addr: string; module: string }
      index: BigNumberish
      tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[]
      expiryDate: BigNumberish
      cycleId: BigNumberish
      submissionsLeft: BigNumberish
    }[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  submitTask(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'submitTask(tuple,tuple,uint256)'(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    },
    _expiryDate: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  submitTaskChain(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'submitTaskChain(tuple,tuple[],uint256,uint256)'(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  submitTaskCycle(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: BytesLike }[]
      actions: {
        addr: string
        data: BytesLike
        operation: BigNumberish
        dataFlow: BigNumberish
        value: BigNumberish
        termsOkCheck: boolean
      }[]
      selfProviderGasLimit: BigNumberish
      selfProviderGasPriceCeil: BigNumberish
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  taskReceiptHash(_taskReceiptId: BigNumberish, overrides?: CallOverrides): Promise<string>

  'taskReceiptHash(uint256)'(_taskReceiptId: BigNumberish, overrides?: CallOverrides): Promise<string>

  callStatic: {
    canExec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    'canExec(tuple,uint256,uint256)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    'canSubmitTask(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    cancelTask(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'cancelTask(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    currentTaskReceiptId(overrides?: CallOverrides): Promise<BigNumber>

    'currentTaskReceiptId()'(overrides?: CallOverrides): Promise<BigNumber>

    exec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    'exec(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<void>

    hashTaskReceipt(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    'hashTaskReceipt(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<string>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: CallOverrides,
    ): Promise<void>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    taskReceiptHash(_taskReceiptId: BigNumberish, overrides?: CallOverrides): Promise<string>

    'taskReceiptHash(uint256)'(_taskReceiptId: BigNumberish, overrides?: CallOverrides): Promise<string>
  }

  filters: {
    LogCanExecFailed(executor: string | null, taskReceiptId: BigNumberish | null, reason: null): EventFilter

    LogExecReverted(
      executor: string | null,
      taskReceiptId: BigNumberish | null,
      executorRefund: null,
      reason: null,
    ): EventFilter

    LogExecSuccess(
      executor: string | null,
      taskReceiptId: BigNumberish | null,
      executorSuccessFee: null,
      sysAdminSuccessFee: null,
    ): EventFilter

    LogTaskCancelled(taskReceiptId: BigNumberish | null, cancellor: string | null): EventFilter

    LogTaskSubmitted(
      taskReceiptId: BigNumberish | null,
      taskReceiptHash: BytesLike | null,
      taskReceipt: null,
    ): EventFilter
  }

  estimateGas: {
    canExec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'canExec(tuple,uint256,uint256)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'canSubmitTask(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    cancelTask(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'cancelTask(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    currentTaskReceiptId(overrides?: CallOverrides): Promise<BigNumber>

    'currentTaskReceiptId()'(overrides?: CallOverrides): Promise<BigNumber>

    exec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    'exec(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<BigNumber>

    hashTaskReceipt(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'hashTaskReceipt(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    taskReceiptHash(_taskReceiptId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'taskReceiptHash(uint256)'(_taskReceiptId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    canExec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'canExec(tuple,uint256,uint256)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'canSubmitTask(address,tuple,tuple,uint256)'(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    cancelTask(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'cancelTask(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    currentTaskReceiptId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'currentTaskReceiptId()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    exec(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'exec(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    hashTaskReceipt(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'hashTaskReceipt(tuple)'(
      _TR: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'multiCancelTasks(tuple[])'(
      _taskReceipts: {
        id: BigNumberish
        userProxy: string
        provider: { addr: string; module: string }
        index: BigNumberish
        tasks: {
          conditions: { inst: string; data: BytesLike }[]
          actions: {
            addr: string
            data: BytesLike
            operation: BigNumberish
            dataFlow: BigNumberish
            value: BigNumberish
            termsOkCheck: boolean
          }[]
          selfProviderGasLimit: BigNumberish
          selfProviderGasPriceCeil: BigNumberish
        }[]
        expiryDate: BigNumberish
        cycleId: BigNumberish
        submissionsLeft: BigNumberish
      }[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'submitTask(tuple,tuple,uint256)'(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      },
      _expiryDate: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'submitTaskChain(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'submitTaskCycle(tuple,tuple[],uint256,uint256)'(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: BytesLike }[]
        actions: {
          addr: string
          data: BytesLike
          operation: BigNumberish
          dataFlow: BigNumberish
          value: BigNumberish
          termsOkCheck: boolean
        }[]
        selfProviderGasLimit: BigNumberish
        selfProviderGasPriceCeil: BigNumberish
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    taskReceiptHash(_taskReceiptId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'taskReceiptHash(uint256)'(_taskReceiptId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
