/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IVatInterface extends ethers.utils.Interface {
  functions: {
    'dai(address)': FunctionFragment
    'ilks(bytes32)': FunctionFragment
    'urns(bytes32,address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'dai', values: [string]): string
  encodeFunctionData(functionFragment: 'ilks', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'urns', values: [BytesLike, string]): string

  decodeFunctionResult(functionFragment: 'dai', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ilks', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'urns', data: BytesLike): Result

  events: {}
}

export class IVat extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IVatInterface

  functions: {
    dai(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'dai(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: BigNumber
    }>

    'ilks(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: BigNumber
    }>

    urns(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>

    'urns(bytes32,address)'(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>
  }

  dai(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'dai(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  ilks(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    0: BigNumber
    1: BigNumber
    2: BigNumber
    3: BigNumber
    4: BigNumber
  }>

  'ilks(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<{
    0: BigNumber
    1: BigNumber
    2: BigNumber
    3: BigNumber
    4: BigNumber
  }>

  urns(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<{
    0: BigNumber
    1: BigNumber
  }>

  'urns(bytes32,address)'(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<{
    0: BigNumber
    1: BigNumber
  }>

  callStatic: {
    dai(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'dai(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: BigNumber
    }>

    'ilks(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: BigNumber
    }>

    urns(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>

    'urns(bytes32,address)'(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>
  }

  filters: {}

  estimateGas: {
    dai(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'dai(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    ilks(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'ilks(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    urns(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'urns(bytes32,address)'(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    dai(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'dai(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    ilks(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'ilks(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    urns(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'urns(bytes32,address)'(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
