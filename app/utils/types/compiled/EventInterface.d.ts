/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface EventInterfaceInterface extends ethers.utils.Interface {
  functions: {
    'emitEvent(uint256,uint256,bytes32,bytes)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'emitEvent', values: [BigNumberish, BigNumberish, BytesLike, BytesLike]): string

  decodeFunctionResult(functionFragment: 'emitEvent', data: BytesLike): Result

  events: {}
}

export class EventInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: EventInterfaceInterface

  functions: {
    emitEvent(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'emitEvent(uint256,uint256,bytes32,bytes)'(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>
  }

  emitEvent(
    _connectorType: BigNumberish,
    _connectorID: BigNumberish,
    _eventCode: BytesLike,
    _eventData: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'emitEvent(uint256,uint256,bytes32,bytes)'(
    _connectorType: BigNumberish,
    _connectorID: BigNumberish,
    _eventCode: BytesLike,
    _eventData: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  callStatic: {
    emitEvent(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    'emitEvent(uint256,uint256,bytes32,bytes)'(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    emitEvent(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'emitEvent(uint256,uint256,bytes32,bytes)'(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    emitEvent(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'emitEvent(uint256,uint256,bytes32,bytes)'(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>
  }
}
