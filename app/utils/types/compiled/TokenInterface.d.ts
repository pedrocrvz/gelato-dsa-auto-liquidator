/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface TokenInterfaceInterface extends ethers.utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'decimals()': FunctionFragment
    'deposit()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'withdraw(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'deposit', values?: undefined): string
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {}
}

export class TokenInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: TokenInterfaceInterface

  functions: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'allowance(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    approve(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'approve(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    balanceOf(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'balanceOf(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    decimals(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'decimals()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    deposit(overrides?: PayableOverrides): Promise<ContractTransaction>

    'deposit()'(overrides?: PayableOverrides): Promise<ContractTransaction>

    transfer(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'transfer(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    transferFrom(arg0: string, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    withdraw(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'withdraw(uint256)'(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>
  }

  allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  'allowance(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  approve(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'approve(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<BigNumber>

  'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

  deposit(overrides?: PayableOverrides): Promise<ContractTransaction>

  'deposit()'(overrides?: PayableOverrides): Promise<ContractTransaction>

  transfer(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'transfer(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  transferFrom(arg0: string, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  withdraw(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'withdraw(uint256)'(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  callStatic: {
    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'allowance(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<void>

    'approve(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<void>

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    deposit(overrides?: CallOverrides): Promise<void>

    'deposit()'(overrides?: CallOverrides): Promise<void>

    transfer(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'transfer(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    transferFrom(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    withdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>

    'withdraw(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'allowance(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'approve(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    deposit(overrides?: PayableOverrides): Promise<BigNumber>

    'deposit()'(overrides?: PayableOverrides): Promise<BigNumber>

    transfer(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'transfer(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    transferFrom(arg0: string, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    withdraw(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'withdraw(uint256)'(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'allowance(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'approve(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'balanceOf(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    deposit(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'deposit()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    transfer(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(arg0: string, arg1: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    transferFrom(arg0: string, arg1: string, arg2: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    withdraw(arg0: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'withdraw(uint256)'(arg0: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>
  }
}
