/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface IGelatoExecutorsInterface extends ethers.utils.Interface {
  functions: {
    'multiReassignProviders(address[],address)': FunctionFragment
    'stakeExecutor()': FunctionFragment
    'unstakeExecutor()': FunctionFragment
    'withdrawExcessExecutorStake(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'multiReassignProviders', values: [string[], string]): string
  encodeFunctionData(functionFragment: 'stakeExecutor', values?: undefined): string
  encodeFunctionData(functionFragment: 'unstakeExecutor', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdrawExcessExecutorStake', values: [BigNumberish]): string

  decodeFunctionResult(functionFragment: 'multiReassignProviders', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakeExecutor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unstakeExecutor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawExcessExecutorStake', data: BytesLike): Result

  events: {
    'LogExecutorBalanceWithdrawn(address,uint256)': EventFragment
    'LogExecutorStaked(address,uint256,uint256)': EventFragment
    'LogExecutorUnstaked(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogExecutorBalanceWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecutorStaked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogExecutorUnstaked'): EventFragment
}

export class IGelatoExecutors extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: IGelatoExecutorsInterface

  functions: {
    multiReassignProviders(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'multiReassignProviders(address[],address)'(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    stakeExecutor(overrides?: PayableOverrides): Promise<ContractTransaction>

    'stakeExecutor()'(overrides?: PayableOverrides): Promise<ContractTransaction>

    unstakeExecutor(overrides?: Overrides): Promise<ContractTransaction>

    'unstakeExecutor()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'withdrawExcessExecutorStake(uint256)'(
      _withdrawAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>
  }

  multiReassignProviders(
    _providers: string[],
    _newExecutor: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'multiReassignProviders(address[],address)'(
    _providers: string[],
    _newExecutor: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  stakeExecutor(overrides?: PayableOverrides): Promise<ContractTransaction>

  'stakeExecutor()'(overrides?: PayableOverrides): Promise<ContractTransaction>

  unstakeExecutor(overrides?: Overrides): Promise<ContractTransaction>

  'unstakeExecutor()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'withdrawExcessExecutorStake(uint256)'(
    _withdrawAmount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  callStatic: {
    multiReassignProviders(_providers: string[], _newExecutor: string, overrides?: CallOverrides): Promise<void>

    'multiReassignProviders(address[],address)'(
      _providers: string[],
      _newExecutor: string,
      overrides?: CallOverrides,
    ): Promise<void>

    stakeExecutor(overrides?: CallOverrides): Promise<void>

    'stakeExecutor()'(overrides?: CallOverrides): Promise<void>

    unstakeExecutor(overrides?: CallOverrides): Promise<void>

    'unstakeExecutor()'(overrides?: CallOverrides): Promise<void>

    withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'withdrawExcessExecutorStake(uint256)'(_withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    LogExecutorBalanceWithdrawn(executor: string | null, withdrawAmount: null): EventFilter

    LogExecutorStaked(executor: string | null, oldStake: null, newStake: null): EventFilter

    LogExecutorUnstaked(executor: string | null): EventFilter
  }

  estimateGas: {
    multiReassignProviders(_providers: string[], _newExecutor: string, overrides?: Overrides): Promise<BigNumber>

    'multiReassignProviders(address[],address)'(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    stakeExecutor(overrides?: PayableOverrides): Promise<BigNumber>

    'stakeExecutor()'(overrides?: PayableOverrides): Promise<BigNumber>

    unstakeExecutor(overrides?: Overrides): Promise<BigNumber>

    'unstakeExecutor()'(overrides?: Overrides): Promise<BigNumber>

    withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'withdrawExcessExecutorStake(uint256)'(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    multiReassignProviders(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'multiReassignProviders(address[],address)'(
      _providers: string[],
      _newExecutor: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    stakeExecutor(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'stakeExecutor()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    unstakeExecutor(overrides?: Overrides): Promise<PopulatedTransaction>

    'unstakeExecutor()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdrawExcessExecutorStake(_withdrawAmount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawExcessExecutorStake(uint256)'(
      _withdrawAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>
  }
}
