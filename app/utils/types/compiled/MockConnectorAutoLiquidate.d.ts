/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, PayableOverrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface MockConnectorAutoLiquidateInterface extends ethers.utils.Interface {
  functions: {
    'connectorID()': FunctionFragment
    'getDataAndCastAutoLiquidation(uint256,uint256,address)': FunctionFragment
    'name()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'connectorID', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getDataAndCastAutoLiquidation',
    values: [BigNumberish, BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string

  decodeFunctionResult(functionFragment: 'connectorID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDataAndCastAutoLiquidation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result

  events: {}
}

export class MockConnectorAutoLiquidate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: MockConnectorAutoLiquidateInterface

  functions: {
    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    getDataAndCastAutoLiquidation(
      _route: BigNumberish,
      _vaultId: BigNumberish,
      _colToken: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'getDataAndCastAutoLiquidation(uint256,uint256,address)'(
      _route: BigNumberish,
      _vaultId: BigNumberish,
      _colToken: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    name(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'name()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>
  }

  connectorID(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'connectorID()'(
    overrides?: CallOverrides,
  ): Promise<{
    _type: BigNumber
    id: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  getDataAndCastAutoLiquidation(
    _route: BigNumberish,
    _vaultId: BigNumberish,
    _colToken: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'getDataAndCastAutoLiquidation(uint256,uint256,address)'(
    _route: BigNumberish,
    _vaultId: BigNumberish,
    _colToken: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    connectorID(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'connectorID()'(
      overrides?: CallOverrides,
    ): Promise<{
      _type: BigNumber
      id: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    getDataAndCastAutoLiquidation(
      _route: BigNumberish,
      _vaultId: BigNumberish,
      _colToken: string,
      overrides?: CallOverrides,
    ): Promise<void>

    'getDataAndCastAutoLiquidation(uint256,uint256,address)'(
      _route: BigNumberish,
      _vaultId: BigNumberish,
      _colToken: string,
      overrides?: CallOverrides,
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    connectorID(overrides?: CallOverrides): Promise<BigNumber>

    'connectorID()'(overrides?: CallOverrides): Promise<BigNumber>

    getDataAndCastAutoLiquidation(
      _route: BigNumberish,
      _vaultId: BigNumberish,
      _colToken: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'getDataAndCastAutoLiquidation(uint256,uint256,address)'(
      _route: BigNumberish,
      _vaultId: BigNumberish,
      _colToken: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'connectorID()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getDataAndCastAutoLiquidation(
      _route: BigNumberish,
      _vaultId: BigNumberish,
      _colToken: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'getDataAndCastAutoLiquidation(uint256,uint256,address)'(
      _route: BigNumberish,
      _vaultId: BigNumberish,
      _colToken: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
